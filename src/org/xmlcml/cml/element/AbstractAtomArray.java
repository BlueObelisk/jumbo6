package org.xmlcml.cml.element;

import java.util.HashMap;
import java.util.Map;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.base.DoubleArrayAttribute;
import org.xmlcml.cml.base.StringArrayAttribute;
import org.xmlcml.cml.base.StringAttribute;

/** A container for a list of atoms.
*
* 
* A child of _molecule_ and contains _atom_ information. There are two strategies:\n \nCreate individual _atom_ elements under _atomArray_ (in any order). This gives the greatest flexibility but is the most verbose.\n Create *Array attributes (e.g. of _elementTypeArrayType_ under _atomArray_. This requires all arrays to be of identical lengths with explicit values for all atoms in every array. This is NOT suitable for complexType atom children such as _atomParity_. It also cannot be checked as easily by schema- and schematron validation. The _atomIDArray_ attribute is mandatory. It is allowed (though not yet recommended) to add _*Array_ children such as _floatArray_\n \n\nThe attributes are directly related to the scalar attributes under _atom_ which should be consulted for more info.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractAtomArray extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "atomArray";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractAtomArray() {
        super("atomArray");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractAtomArray to copy

    */

    public AbstractAtomArray(AbstractAtomArray old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("ref", "ref");
        attributeGroupNameTable.put("elementType", "elementTypeArray");
        attributeGroupNameTable.put("count", "countArray");
        attributeGroupNameTable.put("formalCharge", "formalChargeArray");
        attributeGroupNameTable.put("hydrogenCount", "hydrogenCountArray");
        attributeGroupNameTable.put("occupancy", "occupancyArray");
        attributeGroupNameTable.put("x2", "x2Array");
        attributeGroupNameTable.put("y2", "y2Array");
        attributeGroupNameTable.put("x3", "x3Array");
        attributeGroupNameTable.put("y3", "y3Array");
        attributeGroupNameTable.put("z3", "z3Array");
        attributeGroupNameTable.put("xFract", "xFractArray");
        attributeGroupNameTable.put("yFract", "yFractArray");
        attributeGroupNameTable.put("zFract", "zFractArray");
        attributeGroupNameTable.put("atomID", "atomIDArray");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getRefAttribute() {
        return (CMLAttribute) getAttribute("ref");
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getRef() {
        CMLAttribute _att_ref = (CMLAttribute) getAttribute("ref");
        if (_att_ref == null) {
            return null;
        }
        return ((StringAttribute)_att_ref).getString();
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value ref value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_ref = null;
            try {
        		_att_ref = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("ref"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_ref == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : ref; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_ref);
        ((StringAttribute)_att_ref).setCMLValue(value);
    }
    /** The identity of a chemical element.
    *
    * Normally mandatory on _atom_, _isotope_, etc.
    * --type info--
    * 
    * An array of elementTypes.
    * Instances of this type will be used in array-style representation of atoms.

    * @return CMLAttribute
    */
    public CMLAttribute getElementTypeAttribute() {
        return (CMLAttribute) getAttribute("elementType");
    }
    /** The identity of a chemical element.
    *
    * Normally mandatory on _atom_, _isotope_, etc.
    * --type info--
    * 
    * An array of elementTypes.
    * Instances of this type will be used in array-style representation of atoms.

    * @return String[]
    */
    public String[] getElementType() {
        CMLAttribute _att_elementType = (CMLAttribute) getAttribute("elementType");
        if (_att_elementType == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_elementType).getStringArray();
    }
    /** The identity of a chemical element.
    *
    * Normally mandatory on _atom_, _isotope_, etc.
    * --type info--
    * 
    * An array of elementTypes.
    * Instances of this type will be used in array-style representation of atoms.

    * @param value elementType value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setElementType(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_elementType = null;
            try {
        		_att_elementType = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("elementTypeArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_elementType == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : elementTypeArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_elementType);
        ((StringArrayAttribute)_att_elementType).setCMLValue(value);
    }
    /** The identity of a chemical element.
    *
    * Normally mandatory on _atom_, _isotope_, etc.
    * --type info--
    * 
    * An array of elementTypes.
    * Instances of this type will be used in array-style representation of atoms.

    * @param value elementType value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setElementType(String value) throws CMLRuntimeException {
            CMLAttribute _att_elementType = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("elementTypeArray"));
            if (_att_elementType == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : elementTypeArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_elementType);
        ((StringArrayAttribute)_att_elementType).setCMLValue(value);
    }
    /** Array of object counts.
    *
    * No fixed semantics or default, normally integral. It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * Array of counts.
    * Normally, but not always, integers. can be used with a number of elements

    * @return CMLAttribute
    */
    public CMLAttribute getCountAttribute() {
        return (CMLAttribute) getAttribute("count");
    }
    /** Array of object counts.
    *
    * No fixed semantics or default, normally integral. It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * Array of counts.
    * Normally, but not always, integers. can be used with a number of elements

    * @return double[]
    */
    public double[] getCount() {
        CMLAttribute _att_count = (CMLAttribute) getAttribute("count");
        if (_att_count == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_count).getDoubleArray();
    }
    /** Array of object counts.
    *
    * No fixed semantics or default, normally integral. It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * Array of counts.
    * Normally, but not always, integers. can be used with a number of elements

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setCount(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_count = null;
            try {
        		_att_count = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("countArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : countArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleArrayAttribute)_att_count).setCMLValue(value);
    }
    /** Array of object counts.
    *
    * No fixed semantics or default, normally integral. It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * Array of counts.
    * Normally, but not always, integers. can be used with a number of elements

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setCount(String value) throws CMLRuntimeException {
            CMLAttribute _att_count = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("countArray"));
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : countArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleArrayAttribute)_att_count).setCMLValue(value);
    }
    /** An array of formalCharges.
    *
    * Used in CML2 Array mode. NOT the calculated charge or oxidation state. No formal defaults, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * Array of formalCharges.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @return CMLAttribute
    */
    public CMLAttribute getFormalChargeAttribute() {
        return (CMLAttribute) getAttribute("formalCharge");
    }
    /** An array of formalCharges.
    *
    * Used in CML2 Array mode. NOT the calculated charge or oxidation state. No formal defaults, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * Array of formalCharges.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @return String[]
    */
    public String[] getFormalCharge() {
        CMLAttribute _att_formalCharge = (CMLAttribute) getAttribute("formalCharge");
        if (_att_formalCharge == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_formalCharge).getStringArray();
    }
    /** An array of formalCharges.
    *
    * Used in CML2 Array mode. NOT the calculated charge or oxidation state. No formal defaults, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * Array of formalCharges.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @param value formalCharge value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setFormalCharge(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_formalCharge = null;
            try {
        		_att_formalCharge = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("formalChargeArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_formalCharge == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : formalChargeArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_formalCharge);
        ((StringArrayAttribute)_att_formalCharge).setCMLValue(value);
    }
    /** An array of formalCharges.
    *
    * Used in CML2 Array mode. NOT the calculated charge or oxidation state. No formal defaults, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * Array of formalCharges.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @param value formalCharge value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setFormalCharge(String value) throws CMLRuntimeException {
            CMLAttribute _att_formalCharge = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("formalChargeArray"));
            if (_att_formalCharge == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : formalChargeArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_formalCharge);
        ((StringArrayAttribute)_att_formalCharge).setCMLValue(value);
    }
    /** Array of hydrogenCounts.
    *
    * Normally used in CML2 array mode. The total number of hydrogens bonded to the atom or molecule. It is preferable to include hydrogens explicitly, and where this is done their count represents the minimum (and may thus override this attribute). It is dangerous to use this attribute for electron-deficient molecules (e.g. diborane) or hydrogen bonds. There is NO DEFAULT and the absence of this attribute must not be given any meaning.
    * --type info--
    * 
    * Array of hydrogenCounts.
    * The total number of hydrogen atoms bonded to an atom or contained in a molecule, whether explicitly included as atoms or not. It is an error to have hydrogen count less than the explicit hydrogen count. There is no default value and no assumptions about hydrogen Count can be made if it is not given. If hydrogenCount is given on every atom, then the values can be summed to give the total hydrogenCount for the (sub)molecule. Because of this hydrogenCount should not be used where hydrogen atoms bridge 2 or more atoms.

    * @return CMLAttribute
    */
    public CMLAttribute getHydrogenCountAttribute() {
        return (CMLAttribute) getAttribute("hydrogenCount");
    }
    /** Array of hydrogenCounts.
    *
    * Normally used in CML2 array mode. The total number of hydrogens bonded to the atom or molecule. It is preferable to include hydrogens explicitly, and where this is done their count represents the minimum (and may thus override this attribute). It is dangerous to use this attribute for electron-deficient molecules (e.g. diborane) or hydrogen bonds. There is NO DEFAULT and the absence of this attribute must not be given any meaning.
    * --type info--
    * 
    * Array of hydrogenCounts.
    * The total number of hydrogen atoms bonded to an atom or contained in a molecule, whether explicitly included as atoms or not. It is an error to have hydrogen count less than the explicit hydrogen count. There is no default value and no assumptions about hydrogen Count can be made if it is not given. If hydrogenCount is given on every atom, then the values can be summed to give the total hydrogenCount for the (sub)molecule. Because of this hydrogenCount should not be used where hydrogen atoms bridge 2 or more atoms.

    * @return String[]
    */
    public String[] getHydrogenCount() {
        CMLAttribute _att_hydrogenCount = (CMLAttribute) getAttribute("hydrogenCount");
        if (_att_hydrogenCount == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_hydrogenCount).getStringArray();
    }
    /** Array of hydrogenCounts.
    *
    * Normally used in CML2 array mode. The total number of hydrogens bonded to the atom or molecule. It is preferable to include hydrogens explicitly, and where this is done their count represents the minimum (and may thus override this attribute). It is dangerous to use this attribute for electron-deficient molecules (e.g. diborane) or hydrogen bonds. There is NO DEFAULT and the absence of this attribute must not be given any meaning.
    * --type info--
    * 
    * Array of hydrogenCounts.
    * The total number of hydrogen atoms bonded to an atom or contained in a molecule, whether explicitly included as atoms or not. It is an error to have hydrogen count less than the explicit hydrogen count. There is no default value and no assumptions about hydrogen Count can be made if it is not given. If hydrogenCount is given on every atom, then the values can be summed to give the total hydrogenCount for the (sub)molecule. Because of this hydrogenCount should not be used where hydrogen atoms bridge 2 or more atoms.

    * @param value hydrogenCount value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setHydrogenCount(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_hydrogenCount = null;
            try {
        		_att_hydrogenCount = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("hydrogenCountArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_hydrogenCount == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : hydrogenCountArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_hydrogenCount);
        ((StringArrayAttribute)_att_hydrogenCount).setCMLValue(value);
    }
    /** Array of hydrogenCounts.
    *
    * Normally used in CML2 array mode. The total number of hydrogens bonded to the atom or molecule. It is preferable to include hydrogens explicitly, and where this is done their count represents the minimum (and may thus override this attribute). It is dangerous to use this attribute for electron-deficient molecules (e.g. diborane) or hydrogen bonds. There is NO DEFAULT and the absence of this attribute must not be given any meaning.
    * --type info--
    * 
    * Array of hydrogenCounts.
    * The total number of hydrogen atoms bonded to an atom or contained in a molecule, whether explicitly included as atoms or not. It is an error to have hydrogen count less than the explicit hydrogen count. There is no default value and no assumptions about hydrogen Count can be made if it is not given. If hydrogenCount is given on every atom, then the values can be summed to give the total hydrogenCount for the (sub)molecule. Because of this hydrogenCount should not be used where hydrogen atoms bridge 2 or more atoms.

    * @param value hydrogenCount value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setHydrogenCount(String value) throws CMLRuntimeException {
            CMLAttribute _att_hydrogenCount = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("hydrogenCountArray"));
            if (_att_hydrogenCount == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : hydrogenCountArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_hydrogenCount);
        ((StringArrayAttribute)_att_hydrogenCount).setCMLValue(value);
    }
    /** Array of occupancies.
    *
    * Normally only found in crystallography. Defaults to 1.0. The occupancy is required to calculate the molecular formula from the atoms.
    * --type info--
    * 
    * Array of atomic occupancies.
    * Primarily for crystallography. Values outside 0-1 are not allowed.

    * @return CMLAttribute
    */
    public CMLAttribute getOccupancyAttribute() {
        return (CMLAttribute) getAttribute("occupancy");
    }
    /** Array of occupancies.
    *
    * Normally only found in crystallography. Defaults to 1.0. The occupancy is required to calculate the molecular formula from the atoms.
    * --type info--
    * 
    * Array of atomic occupancies.
    * Primarily for crystallography. Values outside 0-1 are not allowed.

    * @return String[]
    */
    public String[] getOccupancy() {
        CMLAttribute _att_occupancy = (CMLAttribute) getAttribute("occupancy");
        if (_att_occupancy == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_occupancy).getStringArray();
    }
    /** Array of occupancies.
    *
    * Normally only found in crystallography. Defaults to 1.0. The occupancy is required to calculate the molecular formula from the atoms.
    * --type info--
    * 
    * Array of atomic occupancies.
    * Primarily for crystallography. Values outside 0-1 are not allowed.

    * @param value occupancy value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setOccupancy(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_occupancy = null;
            try {
        		_att_occupancy = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("occupancyArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_occupancy == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : occupancyArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_occupancy);
        ((StringArrayAttribute)_att_occupancy).setCMLValue(value);
    }
    /** Array of occupancies.
    *
    * Normally only found in crystallography. Defaults to 1.0. The occupancy is required to calculate the molecular formula from the atoms.
    * --type info--
    * 
    * Array of atomic occupancies.
    * Primarily for crystallography. Values outside 0-1 are not allowed.

    * @param value occupancy value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setOccupancy(String value) throws CMLRuntimeException {
            CMLAttribute _att_occupancy = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("occupancyArray"));
            if (_att_occupancy == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : occupancyArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_occupancy);
        ((StringArrayAttribute)_att_occupancy).setCMLValue(value);
    }
    /** array of x2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getX2Attribute() {
        return (CMLAttribute) getAttribute("x2");
    }
    /** array of x2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getX2() {
        CMLAttribute _att_x2 = (CMLAttribute) getAttribute("x2");
        if (_att_x2 == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_x2).getDoubleArray();
    }
    /** array of x2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value x2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setX2(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_x2 = null;
            try {
        		_att_x2 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("x2Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_x2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : x2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_x2);
        ((DoubleArrayAttribute)_att_x2).setCMLValue(value);
    }
    /** array of x2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value x2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setX2(String value) throws CMLRuntimeException {
            CMLAttribute _att_x2 = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("x2Array"));
            if (_att_x2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : x2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_x2);
        ((DoubleArrayAttribute)_att_x2).setCMLValue(value);
    }
    /** array of y2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getY2Attribute() {
        return (CMLAttribute) getAttribute("y2");
    }
    /** array of y2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getY2() {
        CMLAttribute _att_y2 = (CMLAttribute) getAttribute("y2");
        if (_att_y2 == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_y2).getDoubleArray();
    }
    /** array of y2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value y2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setY2(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_y2 = null;
            try {
        		_att_y2 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("y2Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_y2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : y2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_y2);
        ((DoubleArrayAttribute)_att_y2).setCMLValue(value);
    }
    /** array of y2 coordinate.
    *
    * Normally used in CML2 array mode. Used for displaying the object in 2 dimensions. Unrelated to the 3-D coordinates for the object. The orientation of the axes matters as it can affect the chirality of object.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value y2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setY2(String value) throws CMLRuntimeException {
            CMLAttribute _att_y2 = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("y2Array"));
            if (_att_y2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : y2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_y2);
        ((DoubleArrayAttribute)_att_y2).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getX3Attribute() {
        return (CMLAttribute) getAttribute("x3");
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getX3() {
        CMLAttribute _att_x3 = (CMLAttribute) getAttribute("x3");
        if (_att_x3 == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_x3).getDoubleArray();
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value x3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setX3(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_x3 = null;
            try {
        		_att_x3 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("x3Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_x3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : x3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_x3);
        ((DoubleArrayAttribute)_att_x3).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value x3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setX3(String value) throws CMLRuntimeException {
            CMLAttribute _att_x3 = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("x3Array"));
            if (_att_x3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : x3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_x3);
        ((DoubleArrayAttribute)_att_x3).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getY3Attribute() {
        return (CMLAttribute) getAttribute("y3");
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getY3() {
        CMLAttribute _att_y3 = (CMLAttribute) getAttribute("y3");
        if (_att_y3 == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_y3).getDoubleArray();
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value y3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setY3(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_y3 = null;
            try {
        		_att_y3 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("y3Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_y3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : y3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_y3);
        ((DoubleArrayAttribute)_att_y3).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value y3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setY3(String value) throws CMLRuntimeException {
            CMLAttribute _att_y3 = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("y3Array"));
            if (_att_y3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : y3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_y3);
        ((DoubleArrayAttribute)_att_y3).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getZ3Attribute() {
        return (CMLAttribute) getAttribute("z3");
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getZ3() {
        CMLAttribute _att_z3 = (CMLAttribute) getAttribute("z3");
        if (_att_z3 == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_z3).getDoubleArray();
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value z3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setZ3(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_z3 = null;
            try {
        		_att_z3 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("z3Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_z3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : z3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_z3);
        ((DoubleArrayAttribute)_att_z3).setCMLValue(value);
    }
    /** Normally used in CML2 array mode.
    *
    * 
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value z3 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setZ3(String value) throws CMLRuntimeException {
            CMLAttribute _att_z3 = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("z3Array"));
            if (_att_z3 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : z3Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_z3);
        ((DoubleArrayAttribute)_att_z3).setCMLValue(value);
    }
    /** Array of fractional x coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getXFractAttribute() {
        return (CMLAttribute) getAttribute("xFract");
    }
    /** Array of fractional x coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getXFract() {
        CMLAttribute _att_xFract = (CMLAttribute) getAttribute("xFract");
        if (_att_xFract == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_xFract).getDoubleArray();
    }
    /** Array of fractional x coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value xFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXFract(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_xFract = null;
            try {
        		_att_xFract = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xFractArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xFract);
        ((DoubleArrayAttribute)_att_xFract).setCMLValue(value);
    }
    /** Array of fractional x coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value xFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setXFract(String value) throws CMLRuntimeException {
            CMLAttribute _att_xFract = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("xFractArray"));
            if (_att_xFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xFract);
        ((DoubleArrayAttribute)_att_xFract).setCMLValue(value);
    }
    /** Array of fractional y coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getYFractAttribute() {
        return (CMLAttribute) getAttribute("yFract");
    }
    /** Array of fractional y coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getYFract() {
        CMLAttribute _att_yFract = (CMLAttribute) getAttribute("yFract");
        if (_att_yFract == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_yFract).getDoubleArray();
    }
    /** Array of fractional y coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value yFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYFract(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_yFract = null;
            try {
        		_att_yFract = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yFractArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yFract);
        ((DoubleArrayAttribute)_att_yFract).setCMLValue(value);
    }
    /** Array of fractional y coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value yFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setYFract(String value) throws CMLRuntimeException {
            CMLAttribute _att_yFract = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("yFractArray"));
            if (_att_yFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yFract);
        ((DoubleArrayAttribute)_att_yFract).setCMLValue(value);
    }
    /** Array of fractional z coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return CMLAttribute
    */
    public CMLAttribute getZFractAttribute() {
        return (CMLAttribute) getAttribute("zFract");
    }
    /** Array of fractional z coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @return double[]
    */
    public double[] getZFract() {
        CMLAttribute _att_zFract = (CMLAttribute) getAttribute("zFract");
        if (_att_zFract == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_zFract).getDoubleArray();
    }
    /** Array of fractional z coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value zFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setZFract(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_zFract = null;
            try {
        		_att_zFract = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("zFractArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_zFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : zFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_zFract);
        ((DoubleArrayAttribute)_att_zFract).setCMLValue(value);
    }
    /** Array of fractional z coordinate.
    *
    * normally xFract, yFract and zFract should all be present or absent. If present a _crystal_ element should also occur.
    * --type info--
    * 
    * An array of coordinateComponents for a single coordinate.
    * An array of coordinateComponents for a single coordinate 
    * where these all refer to an X-coordinate (NOT x,y,z).Instances of this type will be 
    * used in array-style representation of 2-D or 3-D coordinates. Currently no machine 
    * validation. Currently not used in STMML, but re-used by CML (see example).

    * @param value zFract value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setZFract(String value) throws CMLRuntimeException {
            CMLAttribute _att_zFract = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("zFractArray"));
            if (_att_zFract == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : zFractArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_zFract);
        ((DoubleArrayAttribute)_att_zFract).setCMLValue(value);
    }
    /** An array of atom IDs.
    *
    * Normally an attribute of an array-based element.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomIDAttribute() {
        return (CMLAttribute) getAttribute("atomID");
    }
    /** An array of atom IDs.
    *
    * Normally an attribute of an array-based element.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return String[]
    */
    public String[] getAtomID() {
        CMLAttribute _att_atomID = (CMLAttribute) getAttribute("atomID");
        if (_att_atomID == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_atomID).getStringArray();
    }
    /** An array of atom IDs.
    *
    * Normally an attribute of an array-based element.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomID value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomID(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_atomID = null;
            try {
        		_att_atomID = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomIDArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomID == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomIDArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomID);
        ((StringArrayAttribute)_att_atomID).setCMLValue(value);
    }
    /** An array of atom IDs.
    *
    * Normally an attribute of an array-based element.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomID value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setAtomID(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomID = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("atomIDArray"));
            if (_att_atomID == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomIDArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomID);
        ((StringArrayAttribute)_att_atomID).setCMLValue(value);
    }
    /** add atomArray element.
    *
    * @param atom atom child to add

    */
    public void addAtom(AbstractAtom atom) {
        atom.detach();
        this.appendChild(atom);
    }
    /** get atomArray child elements .
    *
    * @return CMLElements<CMLAtom>
    */
    public CMLElements<CMLAtom> getAtomElements() {
        Elements elements = this.getChildElements("atom", CML_NS);
        return new CMLElements<CMLAtom>(elements);
    }
    /** add atomArray element.
    *
    * @param array array child to add

    */
    public void addArray(AbstractArray array) {
        array.detach();
        this.appendChild(array);
    }
    /** get atomArray child elements .
    *
    * @return CMLElements<CMLArray>
    */
    public CMLElements<CMLArray> getArrayElements() {
        Elements elements = this.getChildElements("array", CML_NS);
        return new CMLElements<CMLArray>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("ref")) {
            setRef(value);
        } else if (name.equals("elementType")) {
            setElementType(value);
        } else if (name.equals("count")) {
            setCount(value);
        } else if (name.equals("formalCharge")) {
            setFormalCharge(value);
        } else if (name.equals("hydrogenCount")) {
            setHydrogenCount(value);
        } else if (name.equals("occupancy")) {
            setOccupancy(value);
        } else if (name.equals("x2")) {
            setX2(value);
        } else if (name.equals("y2")) {
            setY2(value);
        } else if (name.equals("x3")) {
            setX3(value);
        } else if (name.equals("y3")) {
            setY3(value);
        } else if (name.equals("z3")) {
            setZ3(value);
        } else if (name.equals("xFract")) {
            setXFract(value);
        } else if (name.equals("yFract")) {
            setYFract(value);
        } else if (name.equals("zFract")) {
            setZFract(value);
        } else if (name.equals("atomID")) {
            setAtomID(value);
        } else {
            super.addAttribute(att);
        }
    }
}
