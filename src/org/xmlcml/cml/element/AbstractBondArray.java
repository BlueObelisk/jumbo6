package org.xmlcml.cml.element;

import nu.xom.Attribute;
import org.xmlcml.cml.base.*;
import nu.xom.Elements;
import java.util.HashMap;
import java.util.Map;
import org.xmlcml.cml.element.CMLBond;
import org.xmlcml.cml.element.CMLArray;

/** A container for a number of bonds.
*
* 
* _bondArray_ is a child of _molecule_ and contains _bond_ information. There are two strategies:\n \nCreate individual bond elements under bondArray\n (in any order). This gives the greatest flexibility but is the most verbose.\n Create *Array attributes (e.g. of orderArrayType under \nbondArray. This requires all arrays to be of identical lengths with explicit values for all bonds in every array. This is NOT suitable for complexType bond children such as _bondStereo_ nor can IDs be added to bonds.. It also cannot be checked as easily by schema- and schematron validation. The _atomRef1Array_ and _atomRef2Array_ attributes are then mandatory. It is allowed (though not yet recommended) to add _*Array_ children such as _floatArray_\n \n\nThe attributes are directly related to the scalar attributes under _atom_ which should be consulted for more info.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractBondArray extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "bondArray";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractBondArray() {
        super("bondArray");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractBondArray to copy

    */

    public AbstractBondArray(AbstractBondArray old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("bondID", "bondIDArray");
        attributeGroupNameTable.put("atomRef1", "atomRef1Array");
        attributeGroupNameTable.put("atomRef2", "atomRef2Array");
        attributeGroupNameTable.put("order", "orderArray");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** The IDs for an array of bond.
    *
    * 
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getBondIDAttribute() {
        return (CMLAttribute) getAttribute("bondID");
    }
    /** The IDs for an array of bond.
    *
    * 
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return String[]
    */
    public String[] getBondID() {
        CMLAttribute _att_bondID = (CMLAttribute) getAttribute("bondID");
        if (_att_bondID == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_bondID).getStringArray();
    }
    /** The IDs for an array of bond.
    *
    * 
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondID value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setBondID(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_bondID = null;
            try {
        		_att_bondID = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("bondIDArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_bondID == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondIDArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondID);
        ((StringArrayAttribute)_att_bondID).setCMLValue(value);
    }
    /** The IDs for an array of bond.
    *
    * 
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondID value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setBondID(String value) throws CMLRuntimeException {
            CMLAttribute _att_bondID = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("bondIDArray"));
            if (_att_bondID == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondIDArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondID);
        ((StringArrayAttribute)_att_bondID).setCMLValue(value);
    }
    /** The first atoms in each bond.
    *
    * Currently only used in bondArray in CML2 array mode.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomRef1Attribute() {
        return (CMLAttribute) getAttribute("atomRef1");
    }
    /** The first atoms in each bond.
    *
    * Currently only used in bondArray in CML2 array mode.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return String[]
    */
    public String[] getAtomRef1() {
        CMLAttribute _att_atomRef1 = (CMLAttribute) getAttribute("atomRef1");
        if (_att_atomRef1 == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_atomRef1).getStringArray();
    }
    /** The first atoms in each bond.
    *
    * Currently only used in bondArray in CML2 array mode.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRef1 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomRef1(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_atomRef1 = null;
            try {
        		_att_atomRef1 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomRef1Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomRef1 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRef1Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRef1);
        ((StringArrayAttribute)_att_atomRef1).setCMLValue(value);
    }
    /** The first atoms in each bond.
    *
    * Currently only used in bondArray in CML2 array mode.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRef1 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setAtomRef1(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomRef1 = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("atomRef1Array"));
            if (_att_atomRef1 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRef1Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRef1);
        ((StringArrayAttribute)_att_atomRef1).setCMLValue(value);
    }
    /** The second atoms in each bond.
    *
    * 
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomRef2Attribute() {
        return (CMLAttribute) getAttribute("atomRef2");
    }
    /** The second atoms in each bond.
    *
    * 
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return String[]
    */
    public String[] getAtomRef2() {
        CMLAttribute _att_atomRef2 = (CMLAttribute) getAttribute("atomRef2");
        if (_att_atomRef2 == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_atomRef2).getStringArray();
    }
    /** The second atoms in each bond.
    *
    * 
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRef2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomRef2(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_atomRef2 = null;
            try {
        		_att_atomRef2 = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomRef2Array"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomRef2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRef2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRef2);
        ((StringArrayAttribute)_att_atomRef2).setCMLValue(value);
    }
    /** The second atoms in each bond.
    *
    * 
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRef2 value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setAtomRef2(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomRef2 = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("atomRef2Array"));
            if (_att_atomRef2 == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRef2Array; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRef2);
        ((StringArrayAttribute)_att_atomRef2).setCMLValue(value);
    }
    /** The order of the bond.
    *
    * There is NO default. This order is for bookkeeping only and is not related to length, QM calculations or other experimental or theoretical calculations.
    * --type info--
    * 
    * An array of bond orders.
    * See order.

    * @return CMLAttribute
    */
    public CMLAttribute getOrderAttribute() {
        return (CMLAttribute) getAttribute("order");
    }
    /** The order of the bond.
    *
    * There is NO default. This order is for bookkeeping only and is not related to length, QM calculations or other experimental or theoretical calculations.
    * --type info--
    * 
    * An array of bond orders.
    * See order.

    * @return String[]
    */
    public String[] getOrder() {
        CMLAttribute _att_order = (CMLAttribute) getAttribute("order");
        if (_att_order == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_order).getStringArray();
    }
    /** The order of the bond.
    *
    * There is NO default. This order is for bookkeeping only and is not related to length, QM calculations or other experimental or theoretical calculations.
    * --type info--
    * 
    * An array of bond orders.
    * See order.

    * @param value order value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setOrder(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_order = null;
            try {
        		_att_order = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("orderArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_order == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : orderArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_order);
        ((StringArrayAttribute)_att_order).setCMLValue(value);
    }
    /** The order of the bond.
    *
    * There is NO default. This order is for bookkeeping only and is not related to length, QM calculations or other experimental or theoretical calculations.
    * --type info--
    * 
    * An array of bond orders.
    * See order.

    * @param value order value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setOrder(String value) throws CMLRuntimeException {
            CMLAttribute _att_order = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("orderArray"));
            if (_att_order == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : orderArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_order);
        ((StringArrayAttribute)_att_order).setCMLValue(value);
    }
    /** add bondArray element.
    *
    * @param bond bond child to add

    */
    public void addBond(AbstractBond bond) {
        bond.detach();
        this.appendChild(bond);
    }
    /** get bondArray child elements .
    *
    * @return CMLElements<CMLBond>
    */
    public CMLElements<CMLBond> getBondElements() {
        Elements elements = this.getChildElements("bond", CML_NS);
        return new CMLElements<CMLBond>(elements);
    }
    /** add bondArray element.
    *
    * @param array array child to add

    */
    public void addArray(AbstractArray array) {
        array.detach();
        this.appendChild(array);
    }
    /** get bondArray child elements .
    *
    * @return CMLElements<CMLArray>
    */
    public CMLElements<CMLArray> getArrayElements() {
        Elements elements = this.getChildElements("array", CML_NS);
        return new CMLElements<CMLArray>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("bondID")) {
            setBondID(value);
        } else if (name.equals("atomRef1")) {
            setAtomRef1(value);
        } else if (name.equals("atomRef2")) {
            setAtomRef2(value);
        } else if (name.equals("order")) {
            setOrder(value);
        } else {
            super.addAttribute(att);
        }
    }
}
