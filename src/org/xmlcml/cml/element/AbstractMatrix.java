// CONTENT of type :xsd:string
package org.xmlcml.cml.element;

import nu.xom.Attribute;
import org.xmlcml.cml.base.*;
import java.util.HashMap;
import java.util.Map;

/** A rectangular matrix of any quantities.
*
* 
* \n By default matrix represents \na rectangular matrix of any quantities\n representable as XSD or STMML dataTypes. It consists of \nrows*columns elements, where columns is the \nfasting moving index. Assuming the elements are counted from 1 they are\n ordered V[1,1],V[1,2],...V[1,columns],V[2,1],V[2,2],...V[2,columns], \n...V[rows,1],V[rows,2],...V[rows,columns]\n \nBy default whitespace is used to separate matrix elements; see \narray for details. There are NO characters or markup \ndelimiting the end of rows; authors must be careful!. The columns\n and rows attributes have no default values; a row vector requires\n a rows attribute of 1.\n \nmatrix also supports many types of square matrix, but at present we\n require all elements to be given, even if the matrix is symmetric, antisymmetric\n or banded diagonal. The matrixType attribute allows software to \nvalidate and process the type of matrix.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractMatrix extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "matrix";
    /** content pseudoattribute*/
    protected CMLAttribute _xmlContent;
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractMatrix() {
        super("matrix");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractMatrix to copy

    */

    public AbstractMatrix(AbstractMatrix old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("dataType", "dataType");
        attributeGroupNameTable.put("delimiter", "delimiter");
        attributeGroupNameTable.put("rows", "rows");
        attributeGroupNameTable.put("columns", "columns");
        attributeGroupNameTable.put("units", "units");
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("matrixType", "matrixType");
        attributeGroupNameTable.put("errorValueArray", "errorValueArray");
        attributeGroupNameTable.put("errorBasis", "errorBasis");
        attributeGroupNameTable.put("minValueArray", "minValueArray");
        attributeGroupNameTable.put("maxValueArray", "maxValueArray");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @return CMLAttribute
    */
    public CMLAttribute getDataTypeAttribute() {
        return (CMLAttribute) getAttribute("dataType");
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @return String
    */
    public String getDataType() {
        CMLAttribute _att_dataType = (CMLAttribute) getAttribute("dataType");
        if (_att_dataType == null) {
            return null;
        }
        return ((StringAttribute)_att_dataType).getString();
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @param value dataType value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDataType(String value) throws CMLRuntimeException {
            CMLAttribute _att_dataType = null;
            try {
        		_att_dataType = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dataType"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dataType == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dataType; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dataType);
        ((StringAttribute)_att_dataType).setCMLValue(value);
    }
    /** A delimiter character for arrays and matrices.
    *
    * By default array components ('elements' in the non-XML sense) are whitespace-separated. This fails for components with embedded whitespace or missing completely:
    *  
    * Example:
    *  In the protein database ' CA' and 'CA' are different atom types, and and array could be:
    *  <array delimiter="/" dictRef="pdb:atomTypes">/ N/ CA/CA/ N/</array> 
    * 
    * Note that the array starts and ends with the delimiter, which must be chosen to avoid accidental use. There is currently no syntax for escaping delimiters.
    * --type info--
    * 
    * A single non-whitespace character to separate components in arrays.
    * 
    *  Some STMML elements (such as array) have
    *  content representing concatenated values. The default separator is
    *  whitespace (which can be normalised) and this should be used whenever
    *  possible. However in some cases the values are empty, or contain whitespace or other
    *  problematic punctuation, and a delimiter is required.
    *  Note that the content string MUST start and end with the delimiter so
    *  there is no ambiguity as to what the components are. Only printable
    *  characters from the ASCII character set should be used, and character
    *  entities should be avoided.
    *  When delimiters are used to separate precise whitespace this should always
    *  consist of spaces and not the other allowed whitespace characters 
    * (newline, tabs, etc.). If the latter are important it is probably best to redesign
    *  the application.
    *  At present there is a controlled pattern of characters selected so as not to collide with common usage in XML document
    * Pattern: [!%\^\*@~;#,|/]

    * @return CMLAttribute
    */
    public CMLAttribute getDelimiterAttribute() {
        return (CMLAttribute) getAttribute("delimiter");
    }
    /** A delimiter character for arrays and matrices.
    *
    * By default array components ('elements' in the non-XML sense) are whitespace-separated. This fails for components with embedded whitespace or missing completely:
    *  
    * Example:
    *  In the protein database ' CA' and 'CA' are different atom types, and and array could be:
    *  <array delimiter="/" dictRef="pdb:atomTypes">/ N/ CA/CA/ N/</array> 
    * 
    * Note that the array starts and ends with the delimiter, which must be chosen to avoid accidental use. There is currently no syntax for escaping delimiters.
    * --type info--
    * 
    * A single non-whitespace character to separate components in arrays.
    * 
    *  Some STMML elements (such as array) have
    *  content representing concatenated values. The default separator is
    *  whitespace (which can be normalised) and this should be used whenever
    *  possible. However in some cases the values are empty, or contain whitespace or other
    *  problematic punctuation, and a delimiter is required.
    *  Note that the content string MUST start and end with the delimiter so
    *  there is no ambiguity as to what the components are. Only printable
    *  characters from the ASCII character set should be used, and character
    *  entities should be avoided.
    *  When delimiters are used to separate precise whitespace this should always
    *  consist of spaces and not the other allowed whitespace characters 
    * (newline, tabs, etc.). If the latter are important it is probably best to redesign
    *  the application.
    *  At present there is a controlled pattern of characters selected so as not to collide with common usage in XML document
    * Pattern: [!%\^\*@~;#,|/]

    * @return String
    */
    public String getDelimiter() {
        CMLAttribute _att_delimiter = (CMLAttribute) getAttribute("delimiter");
        if (_att_delimiter == null) {
            return null;
        }
        return ((StringAttribute)_att_delimiter).getString();
    }
    /** A delimiter character for arrays and matrices.
    *
    * By default array components ('elements' in the non-XML sense) are whitespace-separated. This fails for components with embedded whitespace or missing completely:
    *  
    * Example:
    *  In the protein database ' CA' and 'CA' are different atom types, and and array could be:
    *  <array delimiter="/" dictRef="pdb:atomTypes">/ N/ CA/CA/ N/</array> 
    * 
    * Note that the array starts and ends with the delimiter, which must be chosen to avoid accidental use. There is currently no syntax for escaping delimiters.
    * --type info--
    * 
    * A single non-whitespace character to separate components in arrays.
    * 
    *  Some STMML elements (such as array) have
    *  content representing concatenated values. The default separator is
    *  whitespace (which can be normalised) and this should be used whenever
    *  possible. However in some cases the values are empty, or contain whitespace or other
    *  problematic punctuation, and a delimiter is required.
    *  Note that the content string MUST start and end with the delimiter so
    *  there is no ambiguity as to what the components are. Only printable
    *  characters from the ASCII character set should be used, and character
    *  entities should be avoided.
    *  When delimiters are used to separate precise whitespace this should always
    *  consist of spaces and not the other allowed whitespace characters 
    * (newline, tabs, etc.). If the latter are important it is probably best to redesign
    *  the application.
    *  At present there is a controlled pattern of characters selected so as not to collide with common usage in XML document
    * Pattern: [!%\^\*@~;#,|/]

    * @param value delimiter value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDelimiter(String value) throws CMLRuntimeException {
            CMLAttribute _att_delimiter = null;
            try {
        		_att_delimiter = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("delimiter"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_delimiter == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : delimiter; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_delimiter);
        ((StringAttribute)_att_delimiter).setCMLValue(value);
    }
    /** Number of rows.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @return CMLAttribute
    */
    public CMLAttribute getRowsAttribute() {
        return (CMLAttribute) getAttribute("rows");
    }
    /** Number of rows.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @return int
    */
    public int getRows() {
        CMLAttribute _att_rows = (CMLAttribute) getAttribute("rows");
        if (_att_rows == null) {
            CMLUtil.BUG("unset attribute: rows");
        }
        return ((IntAttribute)_att_rows).getInt();
    }
    /** Number of rows.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @param value rows value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRows(int value) throws CMLRuntimeException {
            CMLAttribute _att_rows = null;
            try {
        		_att_rows = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("rows"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_rows == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : rows; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_rows);
        ((IntAttribute)_att_rows).setCMLValue(value);
    }
    /** Number of rows.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @param value rows value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setRows(String value) throws CMLRuntimeException {
            CMLAttribute _att_rows = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("rows"));
            if (_att_rows == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : rows; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_rows);
        ((IntAttribute)_att_rows).setCMLValue(value);
    }
    /** Number of columns.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @return CMLAttribute
    */
    public CMLAttribute getColumnsAttribute() {
        return (CMLAttribute) getAttribute("columns");
    }
    /** Number of columns.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @return int
    */
    public int getColumns() {
        CMLAttribute _att_columns = (CMLAttribute) getAttribute("columns");
        if (_att_columns == null) {
            CMLUtil.BUG("unset attribute: columns");
        }
        return ((IntAttribute)_att_columns).getInt();
    }
    /** Number of columns.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @param value columns value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setColumns(int value) throws CMLRuntimeException {
            CMLAttribute _att_columns = null;
            try {
        		_att_columns = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("columns"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_columns == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : columns; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_columns);
        ((IntAttribute)_att_columns).setCMLValue(value);
    }
    /** Number of columns.
    *
    * 
    * --type info--
    * 
    * The size of an array.
    * The size of an array. Redundant, but serves as a check for processing software (useful if delimiters are used).
    * MinInclusive: 0

    * @param value columns value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setColumns(String value) throws CMLRuntimeException {
            CMLAttribute _att_columns = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("columns"));
            if (_att_columns == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : columns; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_columns);
        ((IntAttribute)_att_columns).setCMLValue(value);
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getUnitsAttribute() {
        return (CMLAttribute) getAttribute("units");
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getUnits() {
        CMLAttribute _att_units = (CMLAttribute) getAttribute("units");
        if (_att_units == null) {
            return null;
        }
        return ((StringAttribute)_att_units).getString();
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value units value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_units = null;
            try {
        		_att_units = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("units"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_units == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : units; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_units);
        ((StringAttribute)_att_units).setCMLValue(value);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** Type of matrix.
    *
    * Mainly square, but extensible through the _xsd:union_ mechanis.
    * --type info--
    * 
    * User-defined matrix-type.
    * This definition must be by reference to a namespaced dictionary entry.

    * @return CMLAttribute
    */
    public CMLAttribute getMatrixTypeAttribute() {
        return (CMLAttribute) getAttribute("matrixType");
    }
    /** Type of matrix.
    *
    * Mainly square, but extensible through the _xsd:union_ mechanis.
    * --type info--
    * 
    * User-defined matrix-type.
    * This definition must be by reference to a namespaced dictionary entry.

    * @return String
    */
    public String getMatrixType() {
        CMLAttribute _att_matrixType = (CMLAttribute) getAttribute("matrixType");
        if (_att_matrixType == null) {
            return null;
        }
        return ((StringAttribute)_att_matrixType).getString();
    }
    /** Type of matrix.
    *
    * Mainly square, but extensible through the _xsd:union_ mechanis.
    * --type info--
    * 
    * User-defined matrix-type.
    * This definition must be by reference to a namespaced dictionary entry.

    * @param value matrixType value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setMatrixType(String value) throws CMLRuntimeException {
            CMLAttribute _att_matrixType = null;
            try {
        		_att_matrixType = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("matrixType"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_matrixType == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : matrixType; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_matrixType);
        ((StringAttribute)_att_matrixType).setCMLValue(value);
    }
    /** Array of error values.
    *
    * Reports the author's estimate of 
    * the error in an array of values. Only meaningful for 
    * dataTypes mapping to real number.
    * --type info--
    * 
    * Array of error estimate values.
    * An observed or calculated estimate of the error in the value of a numeric quantity. It should be ignored for dataTypes such as URL, date or string. The statistical basis of the errorValueType is not defined - it could be a range, an estimated standard deviation, an observed standard error, etc. This information can be added through _errorBasisType_.

    * @return CMLAttribute
    */
    public CMLAttribute getErrorValueArrayAttribute() {
        return (CMLAttribute) getAttribute("errorValueArray");
    }
    /** Array of error values.
    *
    * Reports the author's estimate of 
    * the error in an array of values. Only meaningful for 
    * dataTypes mapping to real number.
    * --type info--
    * 
    * Array of error estimate values.
    * An observed or calculated estimate of the error in the value of a numeric quantity. It should be ignored for dataTypes such as URL, date or string. The statistical basis of the errorValueType is not defined - it could be a range, an estimated standard deviation, an observed standard error, etc. This information can be added through _errorBasisType_.

    * @return String[]
    */
    public String[] getErrorValueArray() {
        CMLAttribute _att_errorValueArray = (CMLAttribute) getAttribute("errorValueArray");
        if (_att_errorValueArray == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_errorValueArray).getStringArray();
    }
    /** Array of error values.
    *
    * Reports the author's estimate of 
    * the error in an array of values. Only meaningful for 
    * dataTypes mapping to real number.
    * --type info--
    * 
    * Array of error estimate values.
    * An observed or calculated estimate of the error in the value of a numeric quantity. It should be ignored for dataTypes such as URL, date or string. The statistical basis of the errorValueType is not defined - it could be a range, an estimated standard deviation, an observed standard error, etc. This information can be added through _errorBasisType_.

    * @param value errorValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setErrorValueArray(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_errorValueArray = null;
            try {
        		_att_errorValueArray = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("errorValueArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_errorValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : errorValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_errorValueArray);
        ((StringArrayAttribute)_att_errorValueArray).setCMLValue(value);
    }
    /** Array of error values.
    *
    * Reports the author's estimate of 
    * the error in an array of values. Only meaningful for 
    * dataTypes mapping to real number.
    * --type info--
    * 
    * Array of error estimate values.
    * An observed or calculated estimate of the error in the value of a numeric quantity. It should be ignored for dataTypes such as URL, date or string. The statistical basis of the errorValueType is not defined - it could be a range, an estimated standard deviation, an observed standard error, etc. This information can be added through _errorBasisType_.

    * @param value errorValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setErrorValueArray(String value) throws CMLRuntimeException {
            CMLAttribute _att_errorValueArray = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("errorValueArray"));
            if (_att_errorValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : errorValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_errorValueArray);
        ((StringArrayAttribute)_att_errorValueArray).setCMLValue(value);
    }
    /** Basis of the error estimate.
    *
    * 
    * --type info--
    * 
    * The basis of an error value.
    * Errors in values can be of several types and this simpleType
    *  provides a small controlled vocabulary.

    * @return CMLAttribute
    */
    public CMLAttribute getErrorBasisAttribute() {
        return (CMLAttribute) getAttribute("errorBasis");
    }
    /** Basis of the error estimate.
    *
    * 
    * --type info--
    * 
    * The basis of an error value.
    * Errors in values can be of several types and this simpleType
    *  provides a small controlled vocabulary.

    * @return String
    */
    public String getErrorBasis() {
        CMLAttribute _att_errorBasis = (CMLAttribute) getAttribute("errorBasis");
        if (_att_errorBasis == null) {
            return null;
        }
        return ((StringAttribute)_att_errorBasis).getString();
    }
    /** Basis of the error estimate.
    *
    * 
    * --type info--
    * 
    * The basis of an error value.
    * Errors in values can be of several types and this simpleType
    *  provides a small controlled vocabulary.

    * @param value errorBasis value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setErrorBasis(String value) throws CMLRuntimeException {
            CMLAttribute _att_errorBasis = null;
            try {
        		_att_errorBasis = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("errorBasis"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_errorBasis == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : errorBasis; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_errorBasis);
        ((StringAttribute)_att_errorBasis).setCMLValue(value);
    }
    /** Minimum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated lists of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @return CMLAttribute
    */
    public CMLAttribute getMinValueArrayAttribute() {
        return (CMLAttribute) getAttribute("minValueArray");
    }
    /** Minimum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated lists of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @return double[]
    */
    public double[] getMinValueArray() {
        CMLAttribute _att_minValueArray = (CMLAttribute) getAttribute("minValueArray");
        if (_att_minValueArray == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_minValueArray).getDoubleArray();
    }
    /** Minimum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated lists of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @param value minValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setMinValueArray(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_minValueArray = null;
            try {
        		_att_minValueArray = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("minValueArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_minValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : minValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_minValueArray);
        ((DoubleArrayAttribute)_att_minValueArray).setCMLValue(value);
    }
    /** Minimum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated lists of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @param value minValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setMinValueArray(String value) throws CMLRuntimeException {
            CMLAttribute _att_minValueArray = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("minValueArray"));
            if (_att_minValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : minValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_minValueArray);
        ((DoubleArrayAttribute)_att_minValueArray).setCMLValue(value);
    }
    /** Maximum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated list of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @return CMLAttribute
    */
    public CMLAttribute getMaxValueArrayAttribute() {
        return (CMLAttribute) getAttribute("maxValueArray");
    }
    /** Maximum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated list of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @return double[]
    */
    public double[] getMaxValueArray() {
        CMLAttribute _att_maxValueArray = (CMLAttribute) getAttribute("maxValueArray");
        if (_att_maxValueArray == null) {
            return null;
        }
        return ((DoubleArrayAttribute)_att_maxValueArray).getDoubleArray();
    }
    /** Maximum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated list of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @param value maxValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setMaxValueArray(double[] value) throws CMLRuntimeException {
            CMLAttribute _att_maxValueArray = null;
            try {
        		_att_maxValueArray = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("maxValueArray"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_maxValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : maxValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_maxValueArray);
        ((DoubleArrayAttribute)_att_maxValueArray).setCMLValue(value);
    }
    /** Maximum values for numeric _matrix_ or _array.
    *
    * A whitespace-separated list of the same length as the array in the parent element.
    * --type info--
    * 
    * OBSOLETE An array of floats.
    * An array of floats or other real numbers. 
    * Not used in STM Schema, but re-used by CML and other languages.

    * @param value maxValueArray value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setMaxValueArray(String value) throws CMLRuntimeException {
            CMLAttribute _att_maxValueArray = new DoubleArrayAttribute((DoubleArrayAttribute)CMLAttributeList.getAttribute("maxValueArray"));
            if (_att_maxValueArray == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : maxValueArray; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_maxValueArray);
        ((DoubleArrayAttribute)_att_maxValueArray).setCMLValue(value);
    }
    /** add matrix element.
    *
    * @param value add content
    * @throws CMLRuntimeException cannot add content; perhaps wrong value/type

    */
    public void setXMLContent(String value) throws CMLRuntimeException {
        if (_xmlContent == null) {
            _xmlContent = new StringAttribute("_xmlContent");
            _xmlContent.setSchemaType(CMLTypeList.getType("xsd:string"));
        }
        ((StringAttribute)_xmlContent).setCMLValue(value);
        String attval = (String)_xmlContent.getValue();
        this.removeChildren();
        this.appendChild(attval);
    }
    /** get content.
    *
    * @return String
    */
    public String getXMLContent() {
        String content = this.getValue();
        if (_xmlContent == null) {
        	_xmlContent = new StringAttribute("_xmlContent");
        	_xmlContent.setSchemaType(CMLTypeList.getType("xsd:string"));
        }
        _xmlContent.setCMLValue(content);
        return ((StringAttribute)_xmlContent).getString();
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("dataType")) {
            setDataType(value);
        } else if (name.equals("delimiter")) {
            setDelimiter(value);
        } else if (name.equals("rows")) {
            setRows(value);
        } else if (name.equals("columns")) {
            setColumns(value);
        } else if (name.equals("units")) {
            setUnits(value);
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("matrixType")) {
            setMatrixType(value);
        } else if (name.equals("errorValueArray")) {
            setErrorValueArray(value);
        } else if (name.equals("errorBasis")) {
            setErrorBasis(value);
        } else if (name.equals("minValueArray")) {
            setMinValueArray(value);
        } else if (name.equals("maxValueArray")) {
            setMaxValueArray(value);
        } else {
            super.addAttribute(att);
        }
    }
}
