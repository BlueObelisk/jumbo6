package org.xmlcml.cml.element;

import java.util.HashMap;
import java.util.Map;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.base.StringAttribute;

/** An argument for a function.
*
* 
* Arguments can be typed and have explicit \nor free values. They can also carry out substitutions in the parent element\n and its children (substitute, still experiemental) and delete itself after\n this.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractArg extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "arg";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractArg() {
        super("arg");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractArg to copy

    */

    public AbstractArg(AbstractArg old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("ref", "ref");
        attributeGroupNameTable.put("name", "name");
        attributeGroupNameTable.put("dataType", "dataType");
        attributeGroupNameTable.put("substitute", "substitute");
        attributeGroupNameTable.put("parameterName", "parameterName");
        attributeGroupNameTable.put("parentAttribute", "parentAttribute");
        attributeGroupNameTable.put("delete", "delete");
        attributeGroupNameTable.put("eval", "eval");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getRefAttribute() {
        return (CMLAttribute) getAttribute("ref");
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getRef() {
        CMLAttribute _att_ref = (CMLAttribute) getAttribute("ref");
        if (_att_ref == null) {
            return null;
        }
        return ((StringAttribute)_att_ref).getString();
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value ref value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_ref = null;
            try {
        		_att_ref = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("ref"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_ref == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : ref; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_ref);
        ((StringAttribute)_att_ref).setCMLValue(value);
    }
    /** Name of the object.
    *
    * A string by which the object is known. Often a required attribute. The may or may not be a semi-controlled vocabulary.

    * @return CMLAttribute
    */
    public CMLAttribute getNameAttribute() {
        return (CMLAttribute) getAttribute("name");
    }
    /** Name of the object.
    *
    * A string by which the object is known. Often a required attribute. The may or may not be a semi-controlled vocabulary.

    * @return String
    */
    public String getName() {
        CMLAttribute _att_name = (CMLAttribute) getAttribute("name");
        if (_att_name == null) {
            return null;
        }
        return ((StringAttribute)_att_name).getString();
    }
    /** Name of the object.
    *
    * A string by which the object is known. Often a required attribute. The may or may not be a semi-controlled vocabulary.

    * @param value name value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setName(String value) throws CMLRuntimeException {
            CMLAttribute _att_name = null;
            try {
        		_att_name = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("name"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_name == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : name; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_name);
        ((StringAttribute)_att_name).setCMLValue(value);
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @return CMLAttribute
    */
    public CMLAttribute getDataTypeAttribute() {
        return (CMLAttribute) getAttribute("dataType");
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @return String
    */
    public String getDataType() {
        CMLAttribute _att_dataType = (CMLAttribute) getAttribute("dataType");
        if (_att_dataType == null) {
            return null;
        }
        return ((StringAttribute)_att_dataType).getString();
    }
    /** The data type of the object.
    *
    * Normally applied to scalar/array 
    * objects but may extend to more complex one.
    * --type info--
    * 
    * an enumerated type for all dataTypes in STM.
    * Note: the attribute xsi:type might be used to enforce the type-checking but I haven't worked this through yet.

    * @param value dataType value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDataType(String value) throws CMLRuntimeException {
            CMLAttribute _att_dataType = null;
            try {
        		_att_dataType = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dataType"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dataType == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dataType; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dataType);
        ((StringAttribute)_att_dataType).setCMLValue(value);
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. The value may be an 
    * XPath expression, at present
    *  all attributes (".//@*") are processed. If an attribute contains _ijk_ where the
    *  name of the arg is 'ijk' this string is replaced by the value of ijk,
    *  e.g. if arg with name ijk has a value of 2 then 'm_ijk__z3' becomes
    *  'm2_z3'. substitute="." replaces this element by its value

    * @return CMLAttribute
    */
    public CMLAttribute getSubstituteAttribute() {
        return (CMLAttribute) getAttribute("substitute");
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. The value may be an 
    * XPath expression, at present
    *  all attributes (".//@*") are processed. If an attribute contains _ijk_ where the
    *  name of the arg is 'ijk' this string is replaced by the value of ijk,
    *  e.g. if arg with name ijk has a value of 2 then 'm_ijk__z3' becomes
    *  'm2_z3'. substitute="." replaces this element by its value

    * @return String
    */
    public String getSubstitute() {
        CMLAttribute _att_substitute = (CMLAttribute) getAttribute("substitute");
        if (_att_substitute == null) {
            return null;
        }
        return ((StringAttribute)_att_substitute).getString();
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. The value may be an 
    * XPath expression, at present
    *  all attributes (".//@*") are processed. If an attribute contains _ijk_ where the
    *  name of the arg is 'ijk' this string is replaced by the value of ijk,
    *  e.g. if arg with name ijk has a value of 2 then 'm_ijk__z3' becomes
    *  'm2_z3'. substitute="." replaces this element by its value

    * @param value substitute value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setSubstitute(String value) throws CMLRuntimeException {
            CMLAttribute _att_substitute = null;
            try {
        		_att_substitute = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("substitute"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_substitute == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : substitute; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_substitute);
        ((StringAttribute)_att_substitute).setCMLValue(value);
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental.

    * @return CMLAttribute
    */
    public CMLAttribute getParameterNameAttribute() {
        return (CMLAttribute) getAttribute("parameterName");
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental.

    * @return String
    */
    public String getParameterName() {
        CMLAttribute _att_parameterName = (CMLAttribute) getAttribute("parameterName");
        if (_att_parameterName == null) {
            return null;
        }
        return ((StringAttribute)_att_parameterName).getString();
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental.

    * @param value parameterName value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setParameterName(String value) throws CMLRuntimeException {
            CMLAttribute _att_parameterName = null;
            try {
        		_att_parameterName = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("parameterName"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_parameterName == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : parameterName; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_parameterName);
        ((StringAttribute)_att_parameterName).setCMLValue(value);
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental. Creates, overwriting
    *  if necessary, an attribute on parent. Example:
    *  
    * <foo>
    *  <arg parentAttribute="bar">zubbo</arg>
    *  
    * will create an attribute bar="zubbo" on <foo> 

    * @return CMLAttribute
    */
    public CMLAttribute getParentAttributeAttribute() {
        return (CMLAttribute) getAttribute("parentAttribute");
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental. Creates, overwriting
    *  if necessary, an attribute on parent. Example:
    *  
    * <foo>
    *  <arg parentAttribute="bar">zubbo</arg>
    *  
    * will create an attribute bar="zubbo" on <foo> 

    * @return String
    */
    public String getParentAttribute() {
        CMLAttribute _att_parentAttribute = (CMLAttribute) getAttribute("parentAttribute");
        if (_att_parentAttribute == null) {
            return null;
        }
        return ((StringAttribute)_att_parentAttribute).getString();
    }
    /** 2006-06-09: PMR added attribute.
    *
    * This is still experimental. Creates, overwriting
    *  if necessary, an attribute on parent. Example:
    *  
    * <foo>
    *  <arg parentAttribute="bar">zubbo</arg>
    *  
    * will create an attribute bar="zubbo" on <foo> 

    * @param value parentAttribute value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setParentAttribute(String value) throws CMLRuntimeException {
            CMLAttribute _att_parentAttribute = null;
            try {
        		_att_parentAttribute = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("parentAttribute"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_parentAttribute == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : parentAttribute; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_parentAttribute);
        ((StringAttribute)_att_parentAttribute).setCMLValue(value);
    }
    /** 2006-05-21: PMR added attribute.
    *
    * An element containg this attribute may only have a transient existence
    *  (e.g. a template to create other elements) and this attribute shows that 
    * the element can be deleted at the appropriate stage. The time at which this
    *  is called is application dependent. At present the presence of the attribute
    *  is sufficient to trigger this; later a controlled vocabulary will be developed.

    * @return CMLAttribute
    */
    public CMLAttribute getDeleteAttribute() {
        return (CMLAttribute) getAttribute("delete");
    }
    /** 2006-05-21: PMR added attribute.
    *
    * An element containg this attribute may only have a transient existence
    *  (e.g. a template to create other elements) and this attribute shows that 
    * the element can be deleted at the appropriate stage. The time at which this
    *  is called is application dependent. At present the presence of the attribute
    *  is sufficient to trigger this; later a controlled vocabulary will be developed.

    * @return String
    */
    public String getDelete() {
        CMLAttribute _att_delete = (CMLAttribute) getAttribute("delete");
        if (_att_delete == null) {
            return null;
        }
        return ((StringAttribute)_att_delete).getString();
    }
    /** 2006-05-21: PMR added attribute.
    *
    * An element containg this attribute may only have a transient existence
    *  (e.g. a template to create other elements) and this attribute shows that 
    * the element can be deleted at the appropriate stage. The time at which this
    *  is called is application dependent. At present the presence of the attribute
    *  is sufficient to trigger this; later a controlled vocabulary will be developed.

    * @param value delete value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDelete(String value) throws CMLRuntimeException {
            CMLAttribute _att_delete = null;
            try {
        		_att_delete = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("delete"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_delete == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : delete; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_delete);
        ((StringAttribute)_att_delete).setCMLValue(value);
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. if eval="_ijk_+3" and
    *  the value of the ijk was 2, this would change the value of the arg to 5. 
    * Only + and - are currently allowed

    * @return CMLAttribute
    */
    public CMLAttribute getEvalAttribute() {
        return (CMLAttribute) getAttribute("eval");
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. if eval="_ijk_+3" and
    *  the value of the ijk was 2, this would change the value of the arg to 5. 
    * Only + and - are currently allowed

    * @return String
    */
    public String getEval() {
        CMLAttribute _att_eval = (CMLAttribute) getAttribute("eval");
        if (_att_eval == null) {
            return null;
        }
        return ((StringAttribute)_att_eval).getString();
    }
    /** 2006-05-21: PMR added attribute.
    *
    * This is still experimental. if eval="_ijk_+3" and
    *  the value of the ijk was 2, this would change the value of the arg to 5. 
    * Only + and - are currently allowed

    * @param value eval value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setEval(String value) throws CMLRuntimeException {
            CMLAttribute _att_eval = null;
            try {
        		_att_eval = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("eval"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_eval == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : eval; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_eval);
        ((StringAttribute)_att_eval).setCMLValue(value);
    }
    /** add arg element.
    *
    * @param matrix matrix child to add

    */
    public void addMatrix(AbstractMatrix matrix) {
        matrix.detach();
        this.appendChild(matrix);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLMatrix>
    */
    public CMLElements<CMLMatrix> getMatrixElements() {
        Elements elements = this.getChildElements("matrix", CML_NS);
        return new CMLElements<CMLMatrix>(elements);
    }
    /** add arg element.
    *
    * @param atomType atomType child to add

    */
    public void addAtomType(AbstractAtomType atomType) {
        atomType.detach();
        this.appendChild(atomType);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLAtomType>
    */
    public CMLElements<CMLAtomType> getAtomTypeElements() {
        Elements elements = this.getChildElements("atomType", CML_NS);
        return new CMLElements<CMLAtomType>(elements);
    }
    /** add arg element.
    *
    * @param atom atom child to add

    */
    public void addAtom(AbstractAtom atom) {
        atom.detach();
        this.appendChild(atom);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLAtom>
    */
    public CMLElements<CMLAtom> getAtomElements() {
        Elements elements = this.getChildElements("atom", CML_NS);
        return new CMLElements<CMLAtom>(elements);
    }
    /** add arg element.
    *
    * @param expression expression child to add

    */
    public void addExpression(AbstractExpression expression) {
        expression.detach();
        this.appendChild(expression);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLExpression>
    */
    public CMLElements<CMLExpression> getExpressionElements() {
        Elements elements = this.getChildElements("expression", CML_NS);
        return new CMLElements<CMLExpression>(elements);
    }
    /** add arg element.
    *
    * @param array array child to add

    */
    public void addArray(AbstractArray array) {
        array.detach();
        this.appendChild(array);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLArray>
    */
    public CMLElements<CMLArray> getArrayElements() {
        Elements elements = this.getChildElements("array", CML_NS);
        return new CMLElements<CMLArray>(elements);
    }
    /** add arg element.
    *
    * @param scalar scalar child to add

    */
    public void addScalar(AbstractScalar scalar) {
        scalar.detach();
        this.appendChild(scalar);
    }
    /** get arg child elements .
    *
    * @return CMLElements<CMLScalar>
    */
    public CMLElements<CMLScalar> getScalarElements() {
        Elements elements = this.getChildElements("scalar", CML_NS);
        return new CMLElements<CMLScalar>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("ref")) {
            setRef(value);
        } else if (name.equals("name")) {
            setName(value);
        } else if (name.equals("dataType")) {
            setDataType(value);
        } else if (name.equals("substitute")) {
            setSubstitute(value);
        } else if (name.equals("parameterName")) {
            setParameterName(value);
        } else if (name.equals("parentAttribute")) {
            setParentAttribute(value);
        } else if (name.equals("delete")) {
            setDelete(value);
        } else if (name.equals("eval")) {
            setEval(value);
        } else {
            super.addAttribute(att);
        }
    }
}
