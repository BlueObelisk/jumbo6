package org.xmlcml.cml.element;

import nu.xom.Attribute;
import org.xmlcml.cml.base.*;
import nu.xom.Elements;
import java.util.HashMap;
import java.util.Map;
import org.xmlcml.cml.element.CMLPeak;
import org.xmlcml.cml.element.CMLPeakGroup;
import org.xmlcml.cml.element.CMLMetadataList;
import org.xmlcml.cml.element.CMLAtom;
import org.xmlcml.cml.element.CMLBond;
import org.xmlcml.cml.element.CMLMolecule;

/** Molecule(s) contributing to this peak.
*
* 
* The molecule or molecule responsible for\n the peak. At present there is no substructure to this\n attribute or concept and only one attribute is allowed. This might, for example,\n be used to manage a mass spectrum or chromatogram
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractPeakGroup extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "peakGroup";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractPeakGroup() {
        super("peakGroup");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractPeakGroup to copy

    */

    public AbstractPeakGroup(AbstractPeakGroup old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("ref", "ref");
        attributeGroupNameTable.put("peakHeight", "peakHeight");
        attributeGroupNameTable.put("peakMultiplicity", "peakMultiplicity");
        attributeGroupNameTable.put("peakShape", "peakShape");
        attributeGroupNameTable.put("integral", "integral");
        attributeGroupNameTable.put("peakUnits", "peakUnits");
        attributeGroupNameTable.put("xMin", "xMin");
        attributeGroupNameTable.put("xMax", "xMax");
        attributeGroupNameTable.put("xValue", "xValue");
        attributeGroupNameTable.put("xWidth", "xWidth");
        attributeGroupNameTable.put("xUnits", "xUnits");
        attributeGroupNameTable.put("yMin", "yMin");
        attributeGroupNameTable.put("yMax", "yMax");
        attributeGroupNameTable.put("yValue", "yValue");
        attributeGroupNameTable.put("yWidth", "yWidth");
        attributeGroupNameTable.put("yUnits", "yUnits");
        attributeGroupNameTable.put("atomRefs", "atomRefs");
        attributeGroupNameTable.put("bondRefs", "bondRefs");
        attributeGroupNameTable.put("moleculeRefs", "moleculeRefs");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getRefAttribute() {
        return (CMLAttribute) getAttribute("ref");
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getRef() {
        CMLAttribute _att_ref = (CMLAttribute) getAttribute("ref");
        if (_att_ref == null) {
            return null;
        }
        return ((StringAttribute)_att_ref).getString();
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value ref value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_ref = null;
            try {
        		_att_ref = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("ref"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_ref == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : ref; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_ref);
        ((StringAttribute)_att_ref).setCMLValue(value);
    }
    /** Height of a peak.
    *
    * For 1-dimensional data 
    * (e.g. y vs x) hould use the same units as the appropriate 
    * axis (e.g. y).

    * @return CMLAttribute
    */
    public CMLAttribute getPeakHeightAttribute() {
        return (CMLAttribute) getAttribute("peakHeight");
    }
    /** Height of a peak.
    *
    * For 1-dimensional data 
    * (e.g. y vs x) hould use the same units as the appropriate 
    * axis (e.g. y).

    * @return double
    */
    public double getPeakHeight() {
        CMLAttribute _att_peakHeight = (CMLAttribute) getAttribute("peakHeight");
        if (_att_peakHeight == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_peakHeight).getDouble();
    }
    /** Height of a peak.
    *
    * For 1-dimensional data 
    * (e.g. y vs x) hould use the same units as the appropriate 
    * axis (e.g. y).

    * @param value peakHeight value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakHeight(double value) throws CMLRuntimeException {
            CMLAttribute _att_peakHeight = null;
            try {
        		_att_peakHeight = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakHeight"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakHeight == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakHeight; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakHeight);
        ((DoubleAttribute)_att_peakHeight).setCMLValue(value);
    }
    /** Height of a peak.
    *
    * For 1-dimensional data 
    * (e.g. y vs x) hould use the same units as the appropriate 
    * axis (e.g. y).

    * @param value peakHeight value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setPeakHeight(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakHeight = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("peakHeight"));
            if (_att_peakHeight == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakHeight; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakHeight);
        ((DoubleAttribute)_att_peakHeight).setCMLValue(value);
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @return CMLAttribute
    */
    public CMLAttribute getPeakMultiplicityAttribute() {
        return (CMLAttribute) getAttribute("peakMultiplicity");
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @return String
    */
    public String getPeakMultiplicity() {
        CMLAttribute _att_peakMultiplicity = (CMLAttribute) getAttribute("peakMultiplicity");
        if (_att_peakMultiplicity == null) {
            return null;
        }
        return ((StringAttribute)_att_peakMultiplicity).getString();
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @param value peakMultiplicity value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakMultiplicity(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakMultiplicity = null;
            try {
        		_att_peakMultiplicity = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakMultiplicity"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakMultiplicity == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakMultiplicity; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakMultiplicity);
        ((StringAttribute)_att_peakMultiplicity).setCMLValue(value);
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @return CMLAttribute
    */
    public CMLAttribute getPeakShapeAttribute() {
        return (CMLAttribute) getAttribute("peakShape");
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @return String
    */
    public String getPeakShape() {
        CMLAttribute _att_peakShape = (CMLAttribute) getAttribute("peakShape");
        if (_att_peakShape == null) {
            return null;
        }
        return ((StringAttribute)_att_peakShape).getString();
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @param value peakShape value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakShape(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakShape = null;
            try {
        		_att_peakShape = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakShape"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakShape == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakShape; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakShape);
        ((StringAttribute)_att_peakShape).setCMLValue(value);
    }
    /** Area under a peak.
    *
    * Unfortunately units are usually arbitrary and not related to the x- and y- axis units, and in this case _peakUnits_ should be use.

    * @return CMLAttribute
    */
    public CMLAttribute getIntegralAttribute() {
        return (CMLAttribute) getAttribute("integral");
    }
    /** Area under a peak.
    *
    * Unfortunately units are usually arbitrary and not related to the x- and y- axis units, and in this case _peakUnits_ should be use.

    * @return String
    */
    public String getIntegral() {
        CMLAttribute _att_integral = (CMLAttribute) getAttribute("integral");
        if (_att_integral == null) {
            return null;
        }
        return ((StringAttribute)_att_integral).getString();
    }
    /** Area under a peak.
    *
    * Unfortunately units are usually arbitrary and not related to the x- and y- axis units, and in this case _peakUnits_ should be use.

    * @param value integral value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setIntegral(String value) throws CMLRuntimeException {
            CMLAttribute _att_integral = null;
            try {
        		_att_integral = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("integral"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_integral == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : integral; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_integral);
        ((StringAttribute)_att_integral).setCMLValue(value);
    }
    /** Units for a peak or peak integral.
    *
    * For 2-dimensional spectra the units represent the observation. For an integral they are usually arbitrary and not related to the x- and y- axis units. Thus NMR spectra may use hydrogen count as the units for the peak area.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getPeakUnitsAttribute() {
        return (CMLAttribute) getAttribute("peakUnits");
    }
    /** Units for a peak or peak integral.
    *
    * For 2-dimensional spectra the units represent the observation. For an integral they are usually arbitrary and not related to the x- and y- axis units. Thus NMR spectra may use hydrogen count as the units for the peak area.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getPeakUnits() {
        CMLAttribute _att_peakUnits = (CMLAttribute) getAttribute("peakUnits");
        if (_att_peakUnits == null) {
            return null;
        }
        return ((StringAttribute)_att_peakUnits).getString();
    }
    /** Units for a peak or peak integral.
    *
    * For 2-dimensional spectra the units represent the observation. For an integral they are usually arbitrary and not related to the x- and y- axis units. Thus NMR spectra may use hydrogen count as the units for the peak area.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value peakUnits value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakUnits = null;
            try {
        		_att_peakUnits = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakUnits"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakUnits == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakUnits; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakUnits);
        ((StringAttribute)_att_peakUnits).setCMLValue(value);
    }
    /** Minimum xValue.
    *
    * Annotates x-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMax_ attribute but if so xMin should be less than or equals 
    * to it.

    * @return CMLAttribute
    */
    public CMLAttribute getXMinAttribute() {
        return (CMLAttribute) getAttribute("xMin");
    }
    /** Minimum xValue.
    *
    * Annotates x-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMax_ attribute but if so xMin should be less than or equals 
    * to it.

    * @return double
    */
    public double getXMin() {
        CMLAttribute _att_xMin = (CMLAttribute) getAttribute("xMin");
        if (_att_xMin == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_xMin).getDouble();
    }
    /** Minimum xValue.
    *
    * Annotates x-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMax_ attribute but if so xMin should be less than or equals 
    * to it.

    * @param value xMin value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXMin(double value) throws CMLRuntimeException {
            CMLAttribute _att_xMin = null;
            try {
        		_att_xMin = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xMin"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xMin == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xMin; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xMin);
        ((DoubleAttribute)_att_xMin).setCMLValue(value);
    }
    /** Minimum xValue.
    *
    * Annotates x-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMax_ attribute but if so xMin should be less than or equals 
    * to it.

    * @param value xMin value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setXMin(String value) throws CMLRuntimeException {
            CMLAttribute _att_xMin = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("xMin"));
            if (_att_xMin == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xMin; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xMin);
        ((DoubleAttribute)_att_xMin).setCMLValue(value);
    }
    /** Maximum xValue.
    *
    * Annotates x-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMin_ attribute but if so xMax should be greater than or 
    * equals to it.

    * @return CMLAttribute
    */
    public CMLAttribute getXMaxAttribute() {
        return (CMLAttribute) getAttribute("xMax");
    }
    /** Maximum xValue.
    *
    * Annotates x-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMin_ attribute but if so xMax should be greater than or 
    * equals to it.

    * @return double
    */
    public double getXMax() {
        CMLAttribute _att_xMax = (CMLAttribute) getAttribute("xMax");
        if (_att_xMax == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_xMax).getDouble();
    }
    /** Maximum xValue.
    *
    * Annotates x-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMin_ attribute but if so xMax should be greater than or 
    * equals to it.

    * @param value xMax value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXMax(double value) throws CMLRuntimeException {
            CMLAttribute _att_xMax = null;
            try {
        		_att_xMax = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xMax"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xMax == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xMax; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xMax);
        ((DoubleAttribute)_att_xMax).setCMLValue(value);
    }
    /** Maximum xValue.
    *
    * Annotates x-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses xUnits or the same units as the data. There may or may not 
    * be a _xMin_ attribute but if so xMax should be greater than or 
    * equals to it.

    * @param value xMax value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setXMax(String value) throws CMLRuntimeException {
            CMLAttribute _att_xMax = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("xMax"));
            if (_att_xMax == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xMax; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xMax);
        ((DoubleAttribute)_att_xMax).setCMLValue(value);
    }
    /** Value along an x axis.
    *
    * Annotates x-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses xUnits or the same units as the data.

    * @return CMLAttribute
    */
    public CMLAttribute getXValueAttribute() {
        return (CMLAttribute) getAttribute("xValue");
    }
    /** Value along an x axis.
    *
    * Annotates x-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses xUnits or the same units as the data.

    * @return double
    */
    public double getXValue() {
        CMLAttribute _att_xValue = (CMLAttribute) getAttribute("xValue");
        if (_att_xValue == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_xValue).getDouble();
    }
    /** Value along an x axis.
    *
    * Annotates x-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses xUnits or the same units as the data.

    * @param value xValue value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXValue(double value) throws CMLRuntimeException {
            CMLAttribute _att_xValue = null;
            try {
        		_att_xValue = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xValue"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xValue == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xValue; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xValue);
        ((DoubleAttribute)_att_xValue).setCMLValue(value);
    }
    /** Value along an x axis.
    *
    * Annotates x-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses xUnits or the same units as the data.

    * @param value xValue value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setXValue(String value) throws CMLRuntimeException {
            CMLAttribute _att_xValue = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("xValue"));
            if (_att_xValue == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xValue; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xValue);
        ((DoubleAttribute)_att_xValue).setCMLValue(value);
    }
    /** An unsigned interval along an x axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * xUnits or the same units as the data.

    * @return CMLAttribute
    */
    public CMLAttribute getXWidthAttribute() {
        return (CMLAttribute) getAttribute("xWidth");
    }
    /** An unsigned interval along an x axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * xUnits or the same units as the data.

    * @return double
    */
    public double getXWidth() {
        CMLAttribute _att_xWidth = (CMLAttribute) getAttribute("xWidth");
        if (_att_xWidth == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_xWidth).getDouble();
    }
    /** An unsigned interval along an x axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * xUnits or the same units as the data.

    * @param value xWidth value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXWidth(double value) throws CMLRuntimeException {
            CMLAttribute _att_xWidth = null;
            try {
        		_att_xWidth = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xWidth"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xWidth == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xWidth; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xWidth);
        ((DoubleAttribute)_att_xWidth).setCMLValue(value);
    }
    /** An unsigned interval along an x axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * xUnits or the same units as the data.

    * @param value xWidth value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setXWidth(String value) throws CMLRuntimeException {
            CMLAttribute _att_xWidth = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("xWidth"));
            if (_att_xWidth == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xWidth; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xWidth);
        ((DoubleAttribute)_att_xWidth).setCMLValue(value);
    }
    /** Units for x axis.
    *
    * All x-axis data must have unambiguous units. Ideally the data and _xMin_ or _xValue_ should share the same units but different xUnits can be used as long as it is clear..
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getXUnitsAttribute() {
        return (CMLAttribute) getAttribute("xUnits");
    }
    /** Units for x axis.
    *
    * All x-axis data must have unambiguous units. Ideally the data and _xMin_ or _xValue_ should share the same units but different xUnits can be used as long as it is clear..
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getXUnits() {
        CMLAttribute _att_xUnits = (CMLAttribute) getAttribute("xUnits");
        if (_att_xUnits == null) {
            return null;
        }
        return ((StringAttribute)_att_xUnits).getString();
    }
    /** Units for x axis.
    *
    * All x-axis data must have unambiguous units. Ideally the data and _xMin_ or _xValue_ should share the same units but different xUnits can be used as long as it is clear..
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value xUnits value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setXUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_xUnits = null;
            try {
        		_att_xUnits = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("xUnits"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_xUnits == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : xUnits; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_xUnits);
        ((StringAttribute)_att_xUnits).setCMLValue(value);
    }
    /** Minimum yValue.
    *
    * Annotates y-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may 
    * not be a _yMax_ attribute but if so yMin should be less than or 
    * equal to it.

    * @return CMLAttribute
    */
    public CMLAttribute getYMinAttribute() {
        return (CMLAttribute) getAttribute("yMin");
    }
    /** Minimum yValue.
    *
    * Annotates y-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may 
    * not be a _yMax_ attribute but if so yMin should be less than or 
    * equal to it.

    * @return double
    */
    public double getYMin() {
        CMLAttribute _att_yMin = (CMLAttribute) getAttribute("yMin");
        if (_att_yMin == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_yMin).getDouble();
    }
    /** Minimum yValue.
    *
    * Annotates y-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may 
    * not be a _yMax_ attribute but if so yMin should be less than or 
    * equal to it.

    * @param value yMin value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYMin(double value) throws CMLRuntimeException {
            CMLAttribute _att_yMin = null;
            try {
        		_att_yMin = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yMin"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yMin == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yMin; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yMin);
        ((DoubleAttribute)_att_yMin).setCMLValue(value);
    }
    /** Minimum yValue.
    *
    * Annotates y-axis data with a minimum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may 
    * not be a _yMax_ attribute but if so yMin should be less than or 
    * equal to it.

    * @param value yMin value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setYMin(String value) throws CMLRuntimeException {
            CMLAttribute _att_yMin = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("yMin"));
            if (_att_yMin == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yMin; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yMin);
        ((DoubleAttribute)_att_yMin).setCMLValue(value);
    }
    /** Maximum yValue.
    *
    * Annotates y-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may not 
    * be a _yMin_ attribute but if so yMax should be greater than or 
    * equals to it.

    * @return CMLAttribute
    */
    public CMLAttribute getYMaxAttribute() {
        return (CMLAttribute) getAttribute("yMax");
    }
    /** Maximum yValue.
    *
    * Annotates y-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may not 
    * be a _yMin_ attribute but if so yMax should be greater than or 
    * equals to it.

    * @return double
    */
    public double getYMax() {
        CMLAttribute _att_yMax = (CMLAttribute) getAttribute("yMax");
        if (_att_yMax == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_yMax).getDouble();
    }
    /** Maximum yValue.
    *
    * Annotates y-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may not 
    * be a _yMin_ attribute but if so yMax should be greater than or 
    * equals to it.

    * @param value yMax value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYMax(double value) throws CMLRuntimeException {
            CMLAttribute _att_yMax = null;
            try {
        		_att_yMax = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yMax"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yMax == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yMax; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yMax);
        ((DoubleAttribute)_att_yMax).setCMLValue(value);
    }
    /** Maximum yValue.
    *
    * Annotates y-axis data with a maximum 
    * value. This need not be algorithmically deducible from the data 
    * and is typically used for the extent of a _peak_ or _peakGroup_. 
    * It uses yUnits or the same units as the data. There may or may not 
    * be a _yMin_ attribute but if so yMax should be greater than or 
    * equals to it.

    * @param value yMax value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setYMax(String value) throws CMLRuntimeException {
            CMLAttribute _att_yMax = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("yMax"));
            if (_att_yMax == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yMax; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yMax);
        ((DoubleAttribute)_att_yMax).setCMLValue(value);
    }
    /** Value along a y axis.
    *
    * Annotates y-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses yUnits or the same units as the data.

    * @return CMLAttribute
    */
    public CMLAttribute getYValueAttribute() {
        return (CMLAttribute) getAttribute("yValue");
    }
    /** Value along a y axis.
    *
    * Annotates y-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses yUnits or the same units as the data.

    * @return double
    */
    public double getYValue() {
        CMLAttribute _att_yValue = (CMLAttribute) getAttribute("yValue");
        if (_att_yValue == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_yValue).getDouble();
    }
    /** Value along a y axis.
    *
    * Annotates y-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses yUnits or the same units as the data.

    * @param value yValue value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYValue(double value) throws CMLRuntimeException {
            CMLAttribute _att_yValue = null;
            try {
        		_att_yValue = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yValue"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yValue == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yValue; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yValue);
        ((DoubleAttribute)_att_yValue).setCMLValue(value);
    }
    /** Value along a y axis.
    *
    * Annotates y-axis data with a value. It 
    * is typically used for the location of a _peak_ or _peakGroup_. It 
    * uses yUnits or the same units as the data.

    * @param value yValue value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setYValue(String value) throws CMLRuntimeException {
            CMLAttribute _att_yValue = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("yValue"));
            if (_att_yValue == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yValue; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yValue);
        ((DoubleAttribute)_att_yValue).setCMLValue(value);
    }
    /** An unsigned interval along a y axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * yUnits or the same units as the data.

    * @return CMLAttribute
    */
    public CMLAttribute getYWidthAttribute() {
        return (CMLAttribute) getAttribute("yWidth");
    }
    /** An unsigned interval along a y axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * yUnits or the same units as the data.

    * @return double
    */
    public double getYWidth() {
        CMLAttribute _att_yWidth = (CMLAttribute) getAttribute("yWidth");
        if (_att_yWidth == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_yWidth).getDouble();
    }
    /** An unsigned interval along a y axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * yUnits or the same units as the data.

    * @param value yWidth value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYWidth(double value) throws CMLRuntimeException {
            CMLAttribute _att_yWidth = null;
            try {
        		_att_yWidth = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yWidth"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yWidth == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yWidth; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yWidth);
        ((DoubleAttribute)_att_yWidth).setCMLValue(value);
    }
    /** An unsigned interval along a y axis.
    *
    * It is typically used for the width of 
    * a _peak_ or _peakGroup_ but could be used for any range. It uses 
    * yUnits or the same units as the data.

    * @param value yWidth value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setYWidth(String value) throws CMLRuntimeException {
            CMLAttribute _att_yWidth = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("yWidth"));
            if (_att_yWidth == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yWidth; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yWidth);
        ((DoubleAttribute)_att_yWidth).setCMLValue(value);
    }
    /** Units for y axis.
    *
    * All y-axis data must have unambiguous units. Ideally the data and _yMin_ or _yValue_ should share the same units but different yUnits can be used as long as it is clear.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getYUnitsAttribute() {
        return (CMLAttribute) getAttribute("yUnits");
    }
    /** Units for y axis.
    *
    * All y-axis data must have unambiguous units. Ideally the data and _yMin_ or _yValue_ should share the same units but different yUnits can be used as long as it is clear.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getYUnits() {
        CMLAttribute _att_yUnits = (CMLAttribute) getAttribute("yUnits");
        if (_att_yUnits == null) {
            return null;
        }
        return ((StringAttribute)_att_yUnits).getString();
    }
    /** Units for y axis.
    *
    * All y-axis data must have unambiguous units. Ideally the data and _yMin_ or _yValue_ should share the same units but different yUnits can be used as long as it is clear.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value yUnits value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setYUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_yUnits = null;
            try {
        		_att_yUnits = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("yUnits"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_yUnits == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : yUnits; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_yUnits);
        ((StringAttribute)_att_yUnits).setCMLValue(value);
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomRefsAttribute() {
        return (CMLAttribute) getAttribute("atomRefs");
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return String[]
    */
    public String[] getAtomRefs() {
        CMLAttribute _att_atomRefs = (CMLAttribute) getAttribute("atomRefs");
        if (_att_atomRefs == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_atomRefs).getStringArray();
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomRefs(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_atomRefs = null;
            try {
        		_att_atomRefs = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomRefs"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRefs);
        ((StringArrayAttribute)_att_atomRefs).setCMLValue(value);
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setAtomRefs(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomRefs = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("atomRefs"));
            if (_att_atomRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRefs);
        ((StringArrayAttribute)_att_atomRefs).setCMLValue(value);
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getBondRefsAttribute() {
        return (CMLAttribute) getAttribute("bondRefs");
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return String[]
    */
    public String[] getBondRefs() {
        CMLAttribute _att_bondRefs = (CMLAttribute) getAttribute("bondRefs");
        if (_att_bondRefs == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_bondRefs).getStringArray();
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setBondRefs(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_bondRefs = null;
            try {
        		_att_bondRefs = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("bondRefs"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_bondRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondRefs);
        ((StringArrayAttribute)_att_bondRefs).setCMLValue(value);
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setBondRefs(String value) throws CMLRuntimeException {
            CMLAttribute _att_bondRefs = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("bondRefs"));
            if (_att_bondRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondRefs);
        ((StringArrayAttribute)_att_bondRefs).setCMLValue(value);
    }
    /** A reference to one or more molecules.
    *
    * Uses the id attribute as the target identification. 
    * The order of molecules is preserved. It is not necessarily an error to have repeated 
    * references to the same molecule
    * --type info--
    * 
    * An array of moleculeRefs.
    * Typical applications are the annotation of 
    * peaks in chromatograms and mapping reactions. The context of the 
    * id resolution is the childOrSibling concept.

    * @return CMLAttribute
    */
    public CMLAttribute getMoleculeRefsAttribute() {
        return (CMLAttribute) getAttribute("moleculeRefs");
    }
    /** A reference to one or more molecules.
    *
    * Uses the id attribute as the target identification. 
    * The order of molecules is preserved. It is not necessarily an error to have repeated 
    * references to the same molecule
    * --type info--
    * 
    * An array of moleculeRefs.
    * Typical applications are the annotation of 
    * peaks in chromatograms and mapping reactions. The context of the 
    * id resolution is the childOrSibling concept.

    * @return String[]
    */
    public String[] getMoleculeRefs() {
        CMLAttribute _att_moleculeRefs = (CMLAttribute) getAttribute("moleculeRefs");
        if (_att_moleculeRefs == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_moleculeRefs).getStringArray();
    }
    /** A reference to one or more molecules.
    *
    * Uses the id attribute as the target identification. 
    * The order of molecules is preserved. It is not necessarily an error to have repeated 
    * references to the same molecule
    * --type info--
    * 
    * An array of moleculeRefs.
    * Typical applications are the annotation of 
    * peaks in chromatograms and mapping reactions. The context of the 
    * id resolution is the childOrSibling concept.

    * @param value moleculeRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setMoleculeRefs(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_moleculeRefs = null;
            try {
        		_att_moleculeRefs = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("moleculeRefs"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_moleculeRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : moleculeRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_moleculeRefs);
        ((StringArrayAttribute)_att_moleculeRefs).setCMLValue(value);
    }
    /** A reference to one or more molecules.
    *
    * Uses the id attribute as the target identification. 
    * The order of molecules is preserved. It is not necessarily an error to have repeated 
    * references to the same molecule
    * --type info--
    * 
    * An array of moleculeRefs.
    * Typical applications are the annotation of 
    * peaks in chromatograms and mapping reactions. The context of the 
    * id resolution is the childOrSibling concept.

    * @param value moleculeRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setMoleculeRefs(String value) throws CMLRuntimeException {
            CMLAttribute _att_moleculeRefs = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("moleculeRefs"));
            if (_att_moleculeRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : moleculeRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_moleculeRefs);
        ((StringArrayAttribute)_att_moleculeRefs).setCMLValue(value);
    }
    /** add peakGroup element.
    *
    * @param peak peak child to add

    */
    public void addPeak(AbstractPeak peak) {
        peak.detach();
        this.appendChild(peak);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLPeak>
    */
    public CMLElements<CMLPeak> getPeakElements() {
        Elements elements = this.getChildElements("peak", CML_NS);
        return new CMLElements<CMLPeak>(elements);
    }
    /** add peakGroup element.
    *
    * @param peakGroup peakGroup child to add

    */
    public void addPeakGroup(AbstractPeakGroup peakGroup) {
        peakGroup.detach();
        this.appendChild(peakGroup);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLPeakGroup>
    */
    public CMLElements<CMLPeakGroup> getPeakGroupElements() {
        Elements elements = this.getChildElements("peakGroup", CML_NS);
        return new CMLElements<CMLPeakGroup>(elements);
    }
    /** add peakGroup element.
    *
    * @param metadataList metadataList child to add

    */
    public void addMetadataList(AbstractMetadataList metadataList) {
        metadataList.detach();
        this.appendChild(metadataList);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLMetadataList>
    */
    public CMLElements<CMLMetadataList> getMetadataListElements() {
        Elements elements = this.getChildElements("metadataList", CML_NS);
        return new CMLElements<CMLMetadataList>(elements);
    }
    /** add peakGroup element.
    *
    * @param atom atom child to add

    */
    public void addAtom(AbstractAtom atom) {
        atom.detach();
        this.appendChild(atom);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLAtom>
    */
    public CMLElements<CMLAtom> getAtomElements() {
        Elements elements = this.getChildElements("atom", CML_NS);
        return new CMLElements<CMLAtom>(elements);
    }
    /** add peakGroup element.
    *
    * @param bond bond child to add

    */
    public void addBond(AbstractBond bond) {
        bond.detach();
        this.appendChild(bond);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLBond>
    */
    public CMLElements<CMLBond> getBondElements() {
        Elements elements = this.getChildElements("bond", CML_NS);
        return new CMLElements<CMLBond>(elements);
    }
    /** add peakGroup element.
    *
    * @param molecule molecule child to add

    */
    public void addMolecule(AbstractMolecule molecule) {
        molecule.detach();
        this.appendChild(molecule);
    }
    /** get peakGroup child elements .
    *
    * @return CMLElements<CMLMolecule>
    */
    public CMLElements<CMLMolecule> getMoleculeElements() {
        Elements elements = this.getChildElements("molecule", CML_NS);
        return new CMLElements<CMLMolecule>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("ref")) {
            setRef(value);
        } else if (name.equals("peakHeight")) {
            setPeakHeight(value);
        } else if (name.equals("peakMultiplicity")) {
            setPeakMultiplicity(value);
        } else if (name.equals("peakShape")) {
            setPeakShape(value);
        } else if (name.equals("integral")) {
            setIntegral(value);
        } else if (name.equals("peakUnits")) {
            setPeakUnits(value);
        } else if (name.equals("xMin")) {
            setXMin(value);
        } else if (name.equals("xMax")) {
            setXMax(value);
        } else if (name.equals("xValue")) {
            setXValue(value);
        } else if (name.equals("xWidth")) {
            setXWidth(value);
        } else if (name.equals("xUnits")) {
            setXUnits(value);
        } else if (name.equals("yMin")) {
            setYMin(value);
        } else if (name.equals("yMax")) {
            setYMax(value);
        } else if (name.equals("yValue")) {
            setYValue(value);
        } else if (name.equals("yWidth")) {
            setYWidth(value);
        } else if (name.equals("yUnits")) {
            setYUnits(value);
        } else if (name.equals("atomRefs")) {
            setAtomRefs(value);
        } else if (name.equals("bondRefs")) {
            setBondRefs(value);
        } else if (name.equals("moleculeRefs")) {
            setMoleculeRefs(value);
        } else {
            super.addAttribute(att);
        }
    }
}
