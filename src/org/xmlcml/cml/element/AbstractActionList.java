package org.xmlcml.cml.element;

import nu.xom.Attribute;
import org.xmlcml.cml.base.*;
import java.util.HashMap;
import java.util.Map;

/** A container for a group of actions.
*
* 
* ActionList contains a series ofactions or \nnestedactionLists.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractActionList extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "actionList";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractActionList() {
        super("actionList");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractActionList to copy

    */

    public AbstractActionList(AbstractActionList old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("start", "start");
        attributeGroupNameTable.put("startCondition", "startCondition");
        attributeGroupNameTable.put("duration", "duration");
        attributeGroupNameTable.put("end", "end");
        attributeGroupNameTable.put("endCondition", "endCondition");
        attributeGroupNameTable.put("units", "units");
        attributeGroupNameTable.put("count", "count");
        attributeGroupNameTable.put("type", "type");
        attributeGroupNameTable.put("order", "actionOrder");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** The start value.
    *
    * The start value in any allowable 
    * XSD representation 

    * @return CMLAttribute
    */
    public CMLAttribute getStartAttribute() {
        return (CMLAttribute) getAttribute("start");
    }
    /** The start value.
    *
    * The start value in any allowable 
    * XSD representation 

    * @return String
    */
    public String getStart() {
        CMLAttribute _att_start = (CMLAttribute) getAttribute("start");
        if (_att_start == null) {
            return null;
        }
        return ((StringAttribute)_att_start).getString();
    }
    /** The start value.
    *
    * The start value in any allowable 
    * XSD representation 

    * @param value start value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setStart(String value) throws CMLRuntimeException {
            CMLAttribute _att_start = null;
            try {
        		_att_start = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("start"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_start == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : start; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_start);
        ((StringAttribute)_att_start).setCMLValue(value);
    }
    /** The start condition.
    *
    * This can describe the condition(s) that has to be met before an action can begin, such as in a recipe. Semantics are unexplored but could be used to control robotic operations.

    * @return CMLAttribute
    */
    public CMLAttribute getStartConditionAttribute() {
        return (CMLAttribute) getAttribute("startCondition");
    }
    /** The start condition.
    *
    * This can describe the condition(s) that has to be met before an action can begin, such as in a recipe. Semantics are unexplored but could be used to control robotic operations.

    * @return String
    */
    public String getStartCondition() {
        CMLAttribute _att_startCondition = (CMLAttribute) getAttribute("startCondition");
        if (_att_startCondition == null) {
            return null;
        }
        return ((StringAttribute)_att_startCondition).getString();
    }
    /** The start condition.
    *
    * This can describe the condition(s) that has to be met before an action can begin, such as in a recipe. Semantics are unexplored but could be used to control robotic operations.

    * @param value startCondition value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setStartCondition(String value) throws CMLRuntimeException {
            CMLAttribute _att_startCondition = null;
            try {
        		_att_startCondition = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("startCondition"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_startCondition == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : startCondition; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_startCondition);
        ((StringAttribute)_att_startCondition).setCMLValue(value);
    }
    /** The duration of the action.
    *
    * Semantics undefined.

    * @return CMLAttribute
    */
    public CMLAttribute getDurationAttribute() {
        return (CMLAttribute) getAttribute("duration");
    }
    /** The duration of the action.
    *
    * Semantics undefined.

    * @return String
    */
    public String getDuration() {
        CMLAttribute _att_duration = (CMLAttribute) getAttribute("duration");
        if (_att_duration == null) {
            return null;
        }
        return ((StringAttribute)_att_duration).getString();
    }
    /** The duration of the action.
    *
    * Semantics undefined.

    * @param value duration value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDuration(String value) throws CMLRuntimeException {
            CMLAttribute _att_duration = null;
            try {
        		_att_duration = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("duration"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_duration == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : duration; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_duration);
        ((StringAttribute)_att_duration).setCMLValue(value);
    }
    /** The end value.
    *
    * The end value in any allowable XSD representation 
    * of data.

    * @return CMLAttribute
    */
    public CMLAttribute getEndAttribute() {
        return (CMLAttribute) getAttribute("end");
    }
    /** The end value.
    *
    * The end value in any allowable XSD representation 
    * of data.

    * @return String
    */
    public String getEnd() {
        CMLAttribute _att_end = (CMLAttribute) getAttribute("end");
        if (_att_end == null) {
            return null;
        }
        return ((StringAttribute)_att_end).getString();
    }
    /** The end value.
    *
    * The end value in any allowable XSD representation 
    * of data.

    * @param value end value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setEnd(String value) throws CMLRuntimeException {
            CMLAttribute _att_end = null;
            try {
        		_att_end = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("end"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_end == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : end; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_end);
        ((StringAttribute)_att_end).setCMLValue(value);
    }
    /** The end condition.
    *
    * 
    *  At present a human-readable string describing some condition when the
    *  ac tion should end. As XML develops it may be possible to add machine-processable
    *  semantics in this field.

    * @return CMLAttribute
    */
    public CMLAttribute getEndConditionAttribute() {
        return (CMLAttribute) getAttribute("endCondition");
    }
    /** The end condition.
    *
    * 
    *  At present a human-readable string describing some condition when the
    *  ac tion should end. As XML develops it may be possible to add machine-processable
    *  semantics in this field.

    * @return String
    */
    public String getEndCondition() {
        CMLAttribute _att_endCondition = (CMLAttribute) getAttribute("endCondition");
        if (_att_endCondition == null) {
            return null;
        }
        return ((StringAttribute)_att_endCondition).getString();
    }
    /** The end condition.
    *
    * 
    *  At present a human-readable string describing some condition when the
    *  ac tion should end. As XML develops it may be possible to add machine-processable
    *  semantics in this field.

    * @param value endCondition value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setEndCondition(String value) throws CMLRuntimeException {
            CMLAttribute _att_endCondition = null;
            try {
        		_att_endCondition = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("endCondition"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_endCondition == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : endCondition; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_endCondition);
        ((StringAttribute)_att_endCondition).setCMLValue(value);
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getUnitsAttribute() {
        return (CMLAttribute) getAttribute("units");
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getUnits() {
        CMLAttribute _att_units = (CMLAttribute) getAttribute("units");
        if (_att_units == null) {
            return null;
        }
        return ((StringAttribute)_att_units).getString();
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value units value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_units = null;
            try {
        		_att_units = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("units"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_units == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : units; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_units);
        ((StringAttribute)_att_units).setCMLValue(value);
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @return CMLAttribute
    */
    public CMLAttribute getCountAttribute() {
        return (CMLAttribute) getAttribute("count");
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @return double
    */
    public double getCount() {
        CMLAttribute _att_count = (CMLAttribute) getAttribute("count");
        if (_att_count == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_count).getDouble();
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setCount(double value) throws CMLRuntimeException {
            CMLAttribute _att_count = null;
            try {
        		_att_count = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("count"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : count; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleAttribute)_att_count).setCMLValue(value);
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setCount(String value) throws CMLRuntimeException {
            CMLAttribute _att_count = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("count"));
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : count; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleAttribute)_att_count).setCMLValue(value);
    }
    /** Type of the object.
    *
    * A qualifier which may affect the semantics of the object.

    * @return CMLAttribute
    */
    public CMLAttribute getTypeAttribute() {
        return (CMLAttribute) getAttribute("type");
    }
    /** Type of the object.
    *
    * A qualifier which may affect the semantics of the object.

    * @return String
    */
    public String getType() {
        CMLAttribute _att_type = (CMLAttribute) getAttribute("type");
        if (_att_type == null) {
            return null;
        }
        return ((StringAttribute)_att_type).getString();
    }
    /** Type of the object.
    *
    * A qualifier which may affect the semantics of the object.

    * @param value type value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setType(String value) throws CMLRuntimeException {
            CMLAttribute _att_type = null;
            try {
        		_att_type = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("type"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_type == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : type; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_type);
        ((StringAttribute)_att_type).setCMLValue(value);
    }
    /** Describes whether child elements are sequential or parallel.
    *
    * There is no default.
    * --type info--
    * 
    * Describes whether child elements are sequential or parallel.
    * There is no default.
    * Permitted values:
    *   sequential
    *   parallel

    * @return CMLAttribute
    */
    public CMLAttribute getOrderAttribute() {
        return (CMLAttribute) getAttribute("order");
    }
    /** Describes whether child elements are sequential or parallel.
    *
    * There is no default.
    * --type info--
    * 
    * Describes whether child elements are sequential or parallel.
    * There is no default.
    * Permitted values:
    *   sequential
    *   parallel

    * @return String
    */
    public String getOrder() {
        CMLAttribute _att_order = (CMLAttribute) getAttribute("order");
        if (_att_order == null) {
            return null;
        }
        return ((StringAttribute)_att_order).getString();
    }
    /** Describes whether child elements are sequential or parallel.
    *
    * There is no default.
    * --type info--
    * 
    * Describes whether child elements are sequential or parallel.
    * There is no default.
    * Permitted values:
    *   sequential
    *   parallel

    * @param value order value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setOrder(String value) throws CMLRuntimeException {
            CMLAttribute _att_order = null;
            try {
        		_att_order = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("actionOrder"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_order == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : actionOrder; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_order);
        ((StringAttribute)_att_order).setCMLValue(value);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("start")) {
            setStart(value);
        } else if (name.equals("startCondition")) {
            setStartCondition(value);
        } else if (name.equals("duration")) {
            setDuration(value);
        } else if (name.equals("end")) {
            setEnd(value);
        } else if (name.equals("endCondition")) {
            setEndCondition(value);
        } else if (name.equals("units")) {
            setUnits(value);
        } else if (name.equals("count")) {
            setCount(value);
        } else if (name.equals("type")) {
            setType(value);
        } else if (name.equals("order")) {
            setOrder(value);
        } else {
            super.addAttribute(att);
        }
    }
}
