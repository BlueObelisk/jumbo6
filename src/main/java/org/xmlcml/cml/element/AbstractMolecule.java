package org.xmlcml.cml.element;

import java.util.HashMap;
import java.util.Map;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.base.CMLUtil;
import org.xmlcml.cml.base.DoubleAttribute;
import org.xmlcml.cml.base.IntAttribute;
import org.xmlcml.cml.base.StringAttribute;

/** The float|integer|string children are for compatibility with CML-1 and are deprecated. scalar|array|matrix should be used instead.
*
* 
* \n \nmolecule is a container for atoms, bonds and submolecules along\n with properties such as crystal and non-builtin properties. It should either\n contain molecule or *Array for atoms and bonds. A molecule\n can be empty (e.g. we just know its name, id, etc.)\n \"Molecule\" need not represent a chemically meaningful molecule. It\n can contain atoms with bonds (as in the solid-sate) and it could \nsimply carry a name (e.g. \"taxol\") without formal representation\n of the structure. It can contain \"sub molecules\", which are often\n discrete subcomponents (e.g. guest-host).\n Molecule can contain a <list> element to contain data\n related to the molecule.\n Within this can be string/float/integer and other nested lists
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractMolecule extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "molecule";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractMolecule() {
        super("molecule");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractMolecule to copy

    */

    public AbstractMolecule(AbstractMolecule old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("ref", "ref");
        attributeGroupNameTable.put("idgen", "idgen");
        attributeGroupNameTable.put("process", "process");
        attributeGroupNameTable.put("formula", "formula");
        attributeGroupNameTable.put("count", "count");
        attributeGroupNameTable.put("countExpression", "countExpression");
        attributeGroupNameTable.put("chirality", "chirality");
        attributeGroupNameTable.put("formalCharge", "formalCharge");
        attributeGroupNameTable.put("spinMultiplicity", "spinMultiplicity");
        attributeGroupNameTable.put("symmetryOriented", "symmetryOriented");
        attributeGroupNameTable.put("role", "role");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getRefAttribute() {
        return (CMLAttribute) getAttribute("ref");
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getRef() {
        CMLAttribute _att_ref = (CMLAttribute) getAttribute("ref");
        if (_att_ref == null) {
            return null;
        }
        return ((StringAttribute)_att_ref).getString();
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value ref value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_ref = null;
            try {
        		_att_ref = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("ref"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_ref == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : ref; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_ref);
        ((StringAttribute)_att_ref).setCMLValue(value);
    }
    /** Allows a referring element to generate a unique id.
    *
    * idgen can hold a unique identifier which is copied into the id
    *  attribute of the referenced element. This avoids multiple copies of the referenced 
    * object with duplicate ids. EXPERIMENTAL
    *  

    * @return CMLAttribute
    */
    public CMLAttribute getIdgenAttribute() {
        return (CMLAttribute) getAttribute("idgen");
    }
    /** Allows a referring element to generate a unique id.
    *
    * idgen can hold a unique identifier which is copied into the id
    *  attribute of the referenced element. This avoids multiple copies of the referenced 
    * object with duplicate ids. EXPERIMENTAL
    *  

    * @return String
    */
    public String getIdgen() {
        CMLAttribute _att_idgen = (CMLAttribute) getAttribute("idgen");
        if (_att_idgen == null) {
            return null;
        }
        return ((StringAttribute)_att_idgen).getString();
    }
    /** Allows a referring element to generate a unique id.
    *
    * idgen can hold a unique identifier which is copied into the id
    *  attribute of the referenced element. This avoids multiple copies of the referenced 
    * object with duplicate ids. EXPERIMENTAL
    *  

    * @param value idgen value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setIdgen(String value) throws CMLRuntimeException {
            CMLAttribute _att_idgen = null;
            try {
        		_att_idgen = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("idgen"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_idgen == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : idgen; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_idgen);
        ((StringAttribute)_att_idgen).setCMLValue(value);
    }
    /** Keyword signifying how object is to be processed.
    *
    * Semantics depend on the parent element

    * @return CMLAttribute
    */
    public CMLAttribute getProcessAttribute() {
        return (CMLAttribute) getAttribute("process");
    }
    /** Keyword signifying how object is to be processed.
    *
    * Semantics depend on the parent element

    * @return String
    */
    public String getProcess() {
        CMLAttribute _att_process = (CMLAttribute) getAttribute("process");
        if (_att_process == null) {
            return null;
        }
        return ((StringAttribute)_att_process).getString();
    }
    /** Keyword signifying how object is to be processed.
    *
    * Semantics depend on the parent element

    * @param value process value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setProcess(String value) throws CMLRuntimeException {
            CMLAttribute _att_process = null;
            try {
        		_att_process = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("process"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_process == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : process; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_process);
        ((StringAttribute)_att_process).setCMLValue(value);
    }
    /** Simple chemical formula.
    *
    * 
    * --type info--
    * 
    * A concise representation for a molecular formula.
    * This MUST adhere to a whitespaced syntax so that it is trivially 
    * machine-parsable. Each element is followed by its count (which may be decimal), 
    * and the string is optionally ended by a formal charge (of form d or -d, i.e. no '+')
    *  NO brackets or other nesting is allowed.
    * Pattern: \s*([A-Z][a-z]?\s+(([0-9]+(\.[0-9]*)?)|(\.[0-9]*))?\s*)+(\s+[\-|+]?[0-9]+)?\s*

    * @return CMLAttribute
    */
    public CMLAttribute getFormulaAttribute() {
        return (CMLAttribute) getAttribute("formula");
    }
    /** Simple chemical formula.
    *
    * 
    * --type info--
    * 
    * A concise representation for a molecular formula.
    * This MUST adhere to a whitespaced syntax so that it is trivially 
    * machine-parsable. Each element is followed by its count (which may be decimal), 
    * and the string is optionally ended by a formal charge (of form d or -d, i.e. no '+')
    *  NO brackets or other nesting is allowed.
    * Pattern: \s*([A-Z][a-z]?\s+(([0-9]+(\.[0-9]*)?)|(\.[0-9]*))?\s*)+(\s+[\-|+]?[0-9]+)?\s*

    * @return String
    */
    public String getFormula() {
        CMLAttribute _att_formula = (CMLAttribute) getAttribute("formula");
        if (_att_formula == null) {
            return null;
        }
        return ((StringAttribute)_att_formula).getString();
    }
    /** Simple chemical formula.
    *
    * 
    * --type info--
    * 
    * A concise representation for a molecular formula.
    * This MUST adhere to a whitespaced syntax so that it is trivially 
    * machine-parsable. Each element is followed by its count (which may be decimal), 
    * and the string is optionally ended by a formal charge (of form d or -d, i.e. no '+')
    *  NO brackets or other nesting is allowed.
    * Pattern: \s*([A-Z][a-z]?\s+(([0-9]+(\.[0-9]*)?)|(\.[0-9]*))?\s*)+(\s+[\-|+]?[0-9]+)?\s*

    * @param value formula value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setFormula(String value) throws CMLRuntimeException {
            CMLAttribute _att_formula = null;
            try {
        		_att_formula = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("formula"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_formula == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : formula; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_formula);
        ((StringAttribute)_att_formula).setCMLValue(value);
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @return CMLAttribute
    */
    public CMLAttribute getCountAttribute() {
        return (CMLAttribute) getAttribute("count");
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @return double
    */
    public double getCount() {
        CMLAttribute _att_count = (CMLAttribute) getAttribute("count");
        if (_att_count == null) {
            return Double.NaN;
        }
        return ((DoubleAttribute)_att_count).getDouble();
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setCount(double value) throws CMLRuntimeException {
            CMLAttribute _att_count = null;
            try {
        		_att_count = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("count"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : count; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleAttribute)_att_count).setCMLValue(value);
    }
    /** The count of the object.
    *
    * No fixed semantics or default, normally integers. 
    * It is presumed that the element can be multiplied by the count value.
    * --type info--
    * 
    * A positive number.
    * Note that we also provide nonNegativeNumber with inclusive zero. The maximum number is (quite large) since 'unbounded' is more difficult to implement.

    * @param value count value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setCount(String value) throws CMLRuntimeException {
            CMLAttribute _att_count = new DoubleAttribute((DoubleAttribute)CMLAttributeList.getAttribute("count"));
            if (_att_count == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : count; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_count);
        ((DoubleAttribute)_att_count).setCMLValue(value);
    }
    /** General formula for the repeat count of the element.
    *
    * Experimental.
    *  No fixed semantics or default. 

    * @return CMLAttribute
    */
    public CMLAttribute getCountExpressionAttribute() {
        return (CMLAttribute) getAttribute("countExpression");
    }
    /** General formula for the repeat count of the element.
    *
    * Experimental.
    *  No fixed semantics or default. 

    * @return String
    */
    public String getCountExpression() {
        CMLAttribute _att_countExpression = (CMLAttribute) getAttribute("countExpression");
        if (_att_countExpression == null) {
            return null;
        }
        return ((StringAttribute)_att_countExpression).getString();
    }
    /** General formula for the repeat count of the element.
    *
    * Experimental.
    *  No fixed semantics or default. 

    * @param value countExpression value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setCountExpression(String value) throws CMLRuntimeException {
            CMLAttribute _att_countExpression = null;
            try {
        		_att_countExpression = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("countExpression"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_countExpression == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : countExpression; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_countExpression);
        ((StringAttribute)_att_countExpression).setCMLValue(value);
    }
    /** The chirality of a system or molecule.
    *
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * --type info--
    * 
    * The chirality of a system or molecule.
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * Permitted values:
    *   enantiomer
    *   racemate
    *   unknown
    *   other

    * @return CMLAttribute
    */
    public CMLAttribute getChiralityAttribute() {
        return (CMLAttribute) getAttribute("chirality");
    }
    /** The chirality of a system or molecule.
    *
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * --type info--
    * 
    * The chirality of a system or molecule.
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * Permitted values:
    *   enantiomer
    *   racemate
    *   unknown
    *   other

    * @return String
    */
    public String getChirality() {
        CMLAttribute _att_chirality = (CMLAttribute) getAttribute("chirality");
        if (_att_chirality == null) {
            return null;
        }
        return ((StringAttribute)_att_chirality).getString();
    }
    /** The chirality of a system or molecule.
    *
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * --type info--
    * 
    * The chirality of a system or molecule.
    * This is being actively investigated by a IUPAC committee (2002) so the convention is likely to change. No formal default.
    * Permitted values:
    *   enantiomer
    *   racemate
    *   unknown
    *   other

    * @param value chirality value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setChirality(String value) throws CMLRuntimeException {
            CMLAttribute _att_chirality = null;
            try {
        		_att_chirality = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("chirality"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_chirality == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : chirality; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_chirality);
        ((StringAttribute)_att_chirality).setCMLValue(value);
    }
    /** The formalCharge on the object.
    *
    * NOT the calculated charge or oxidation state. No formal default, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * The formal charge on an object.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @return CMLAttribute
    */
    public CMLAttribute getFormalChargeAttribute() {
        return (CMLAttribute) getAttribute("formalCharge");
    }
    /** The formalCharge on the object.
    *
    * NOT the calculated charge or oxidation state. No formal default, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * The formal charge on an object.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @return int
    */
    public int getFormalCharge() {
        CMLAttribute _att_formalCharge = (CMLAttribute) getAttribute("formalCharge");
        if (_att_formalCharge == null) {
            CMLUtil.BUG("unset attribute: formalCharge");
        }
        return ((IntAttribute)_att_formalCharge).getInt();
    }
    /** The formalCharge on the object.
    *
    * NOT the calculated charge or oxidation state. No formal default, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * The formal charge on an object.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @param value formalCharge value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setFormalCharge(int value) throws CMLRuntimeException {
            CMLAttribute _att_formalCharge = null;
            try {
        		_att_formalCharge = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("formalCharge"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_formalCharge == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : formalCharge; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_formalCharge);
        ((IntAttribute)_att_formalCharge).setCMLValue(value);
    }
    /** The formalCharge on the object.
    *
    * NOT the calculated charge or oxidation state. No formal default, but assumed to be zero if omitted. It may become good practice to include it.
    * --type info--
    * 
    * The formal charge on an object.
    * Used for electron-bookeeping. This has no relation to its calculated (fractional) charge or oxidation state.

    * @param value formalCharge value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setFormalCharge(String value) throws CMLRuntimeException {
            CMLAttribute _att_formalCharge = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("formalCharge"));
            if (_att_formalCharge == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : formalCharge; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_formalCharge);
        ((IntAttribute)_att_formalCharge).setCMLValue(value);
    }
    /** Spin multiplicity.
    *
    * Normally for a molecule. This attribute gives the spin multiplicity of the molecule and is independent of any atomic information. No default, and it may take any positive integer value (though values are normally between 1 and 5.
    * --type info--
    * 
    * MinExclusive: 0

    * @return CMLAttribute
    */
    public CMLAttribute getSpinMultiplicityAttribute() {
        return (CMLAttribute) getAttribute("spinMultiplicity");
    }
    /** Spin multiplicity.
    *
    * Normally for a molecule. This attribute gives the spin multiplicity of the molecule and is independent of any atomic information. No default, and it may take any positive integer value (though values are normally between 1 and 5.
    * --type info--
    * 
    * MinExclusive: 0

    * @return int
    */
    public int getSpinMultiplicity() {
        CMLAttribute _att_spinMultiplicity = (CMLAttribute) getAttribute("spinMultiplicity");
        if (_att_spinMultiplicity == null) {
            CMLUtil.BUG("unset attribute: spinMultiplicity");
        }
        return ((IntAttribute)_att_spinMultiplicity).getInt();
    }
    /** Spin multiplicity.
    *
    * Normally for a molecule. This attribute gives the spin multiplicity of the molecule and is independent of any atomic information. No default, and it may take any positive integer value (though values are normally between 1 and 5.
    * --type info--
    * 
    * MinExclusive: 0

    * @param value spinMultiplicity value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setSpinMultiplicity(int value) throws CMLRuntimeException {
            CMLAttribute _att_spinMultiplicity = null;
            try {
        		_att_spinMultiplicity = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("spinMultiplicity"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_spinMultiplicity == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : spinMultiplicity; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_spinMultiplicity);
        ((IntAttribute)_att_spinMultiplicity).setCMLValue(value);
    }
    /** Spin multiplicity.
    *
    * Normally for a molecule. This attribute gives the spin multiplicity of the molecule and is independent of any atomic information. No default, and it may take any positive integer value (though values are normally between 1 and 5.
    * --type info--
    * 
    * MinExclusive: 0

    * @param value spinMultiplicity value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setSpinMultiplicity(String value) throws CMLRuntimeException {
            CMLAttribute _att_spinMultiplicity = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("spinMultiplicity"));
            if (_att_spinMultiplicity == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : spinMultiplicity; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_spinMultiplicity);
        ((IntAttribute)_att_spinMultiplicity).setCMLValue(value);
    }
    /** Is the molecule oriented to the symmetry.
    *
    * No formal default, but a molecule is assumed to be oriented according to any _symmetry_ children. This is required for crystallographic data, but some systems for isolated molecules allow specification of arbitrary Cartesian or internal coordinates, which must be fitted or refined to a prescribed symmetry. In this case the attribute value is false.
    * --type info--
    * 
    * Permitted values:
    *   true
    *   false

    * @return CMLAttribute
    */
    public CMLAttribute getSymmetryOrientedAttribute() {
        return (CMLAttribute) getAttribute("symmetryOriented");
    }
    /** Is the molecule oriented to the symmetry.
    *
    * No formal default, but a molecule is assumed to be oriented according to any _symmetry_ children. This is required for crystallographic data, but some systems for isolated molecules allow specification of arbitrary Cartesian or internal coordinates, which must be fitted or refined to a prescribed symmetry. In this case the attribute value is false.
    * --type info--
    * 
    * Permitted values:
    *   true
    *   false

    * @return String
    */
    public String getSymmetryOriented() {
        CMLAttribute _att_symmetryOriented = (CMLAttribute) getAttribute("symmetryOriented");
        if (_att_symmetryOriented == null) {
            return null;
        }
        return ((StringAttribute)_att_symmetryOriented).getString();
    }
    /** Is the molecule oriented to the symmetry.
    *
    * No formal default, but a molecule is assumed to be oriented according to any _symmetry_ children. This is required for crystallographic data, but some systems for isolated molecules allow specification of arbitrary Cartesian or internal coordinates, which must be fitted or refined to a prescribed symmetry. In this case the attribute value is false.
    * --type info--
    * 
    * Permitted values:
    *   true
    *   false

    * @param value symmetryOriented value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setSymmetryOriented(String value) throws CMLRuntimeException {
            CMLAttribute _att_symmetryOriented = null;
            try {
        		_att_symmetryOriented = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("symmetryOriented"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_symmetryOriented == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : symmetryOriented; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_symmetryOriented);
        ((StringAttribute)_att_symmetryOriented).setCMLValue(value);
    }
    /** Role of the object.
    *
    * How the object functions or its position in the architecture. No controlled vocabulary.

    * @return CMLAttribute
    */
    public CMLAttribute getRoleAttribute() {
        return (CMLAttribute) getAttribute("role");
    }
    /** Role of the object.
    *
    * How the object functions or its position in the architecture. No controlled vocabulary.

    * @return String
    */
    public String getRole() {
        CMLAttribute _att_role = (CMLAttribute) getAttribute("role");
        if (_att_role == null) {
            return null;
        }
        return ((StringAttribute)_att_role).getString();
    }
    /** Role of the object.
    *
    * How the object functions or its position in the architecture. No controlled vocabulary.

    * @param value role value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRole(String value) throws CMLRuntimeException {
            CMLAttribute _att_role = null;
            try {
        		_att_role = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("role"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_role == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : role; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_role);
        ((StringAttribute)_att_role).setCMLValue(value);
    }
    /** add molecule element.
    *
    * @param symmetry symmetry child to add

    */
    public void addSymmetry(AbstractSymmetry symmetry) {
        symmetry.detach();
        this.appendChild(symmetry);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLSymmetry>
    */
    public CMLElements<CMLSymmetry> getSymmetryElements() {
        Elements elements = this.getChildElements("symmetry", CML_NS);
        return new CMLElements<CMLSymmetry>(elements);
    }
    /** add molecule element.
    *
    * @param list list child to add

    */
    public void addList(AbstractList list) {
        list.detach();
        this.appendChild(list);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLList>
    */
    public CMLElements<CMLList> getListElements() {
        Elements elements = this.getChildElements("list", CML_NS);
        return new CMLElements<CMLList>(elements);
    }
    /** add molecule element.
    *
    * @param arg arg child to add

    */
    public void addArg(AbstractArg arg) {
        arg.detach();
        this.appendChild(arg);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLArg>
    */
    public CMLElements<CMLArg> getArgElements() {
        Elements elements = this.getChildElements("arg", CML_NS);
        return new CMLElements<CMLArg>(elements);
    }
    /** add molecule element.
    *
    * @param zMatrix zMatrix child to add

    */
    public void addZMatrix(AbstractZMatrix zMatrix) {
        zMatrix.detach();
        this.appendChild(zMatrix);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLZMatrix>
    */
    public CMLElements<CMLZMatrix> getZMatrixElements() {
        Elements elements = this.getChildElements("zMatrix", CML_NS);
        return new CMLElements<CMLZMatrix>(elements);
    }
    /** add molecule element.
    *
    * @param metadataList metadataList child to add

    */
    public void addMetadataList(AbstractMetadataList metadataList) {
        metadataList.detach();
        this.appendChild(metadataList);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLMetadataList>
    */
    public CMLElements<CMLMetadataList> getMetadataListElements() {
        Elements elements = this.getChildElements("metadataList", CML_NS);
        return new CMLElements<CMLMetadataList>(elements);
    }
    /** add molecule element.
    *
    * @param length length child to add

    */
    public void addLength(AbstractLength length) {
        length.detach();
        this.appendChild(length);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLLength>
    */
    public CMLElements<CMLLength> getLengthElements() {
        Elements elements = this.getChildElements("length", CML_NS);
        return new CMLElements<CMLLength>(elements);
    }
    /** add molecule element.
    *
    * @param propertyList propertyList child to add

    */
    public void addPropertyList(AbstractPropertyList propertyList) {
        propertyList.detach();
        this.appendChild(propertyList);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLPropertyList>
    */
    public CMLElements<CMLPropertyList> getPropertyListElements() {
        Elements elements = this.getChildElements("propertyList", CML_NS);
        return new CMLElements<CMLPropertyList>(elements);
    }
    /** add molecule element.
    *
    * @param formula formula child to add

    */
    public void addFormula(AbstractFormula formula) {
        formula.detach();
        this.appendChild(formula);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLFormula>
    */
    public CMLElements<CMLFormula> getFormulaElements() {
        Elements elements = this.getChildElements("formula", CML_NS);
        return new CMLElements<CMLFormula>(elements);
    }
    /** add molecule element.
    *
    * @param molecule molecule child to add

    */
    public void addMolecule(AbstractMolecule molecule) {
        molecule.detach();
        this.appendChild(molecule);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLMolecule>
    */
    public CMLElements<CMLMolecule> getMoleculeElements() {
        Elements elements = this.getChildElements("molecule", CML_NS);
        return new CMLElements<CMLMolecule>(elements);
    }
    /** add molecule element.
    *
    * @param atomArray atomArray child to add

    */
    public void addAtomArray(AbstractAtomArray atomArray) {
        atomArray.detach();
        this.appendChild(atomArray);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLAtomArray>
    */
    public CMLElements<CMLAtomArray> getAtomArrayElements() {
        Elements elements = this.getChildElements("atomArray", CML_NS);
        return new CMLElements<CMLAtomArray>(elements);
    }
    /** add molecule element.
    *
    * @param scalar scalar child to add

    */
    public void addScalar(AbstractScalar scalar) {
        scalar.detach();
        this.appendChild(scalar);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLScalar>
    */
    public CMLElements<CMLScalar> getScalarElements() {
        Elements elements = this.getChildElements("scalar", CML_NS);
        return new CMLElements<CMLScalar>(elements);
    }
    /** add molecule element.
    *
    * @param array array child to add

    */
    public void addArray(AbstractArray array) {
        array.detach();
        this.appendChild(array);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLArray>
    */
    public CMLElements<CMLArray> getArrayElements() {
        Elements elements = this.getChildElements("array", CML_NS);
        return new CMLElements<CMLArray>(elements);
    }
    /** add molecule element.
    *
    * @param electron electron child to add

    */
    public void addElectron(AbstractElectron electron) {
        electron.detach();
        this.appendChild(electron);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLElectron>
    */
    public CMLElements<CMLElectron> getElectronElements() {
        Elements elements = this.getChildElements("electron", CML_NS);
        return new CMLElements<CMLElectron>(elements);
    }
    /** add molecule element.
    *
    * @param crystal crystal child to add

    */
    public void addCrystal(AbstractCrystal crystal) {
        crystal.detach();
        this.appendChild(crystal);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLCrystal>
    */
    public CMLElements<CMLCrystal> getCrystalElements() {
        Elements elements = this.getChildElements("crystal", CML_NS);
        return new CMLElements<CMLCrystal>(elements);
    }
    /** add molecule element.
    *
    * @param matrix matrix child to add

    */
    public void addMatrix(AbstractMatrix matrix) {
        matrix.detach();
        this.appendChild(matrix);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLMatrix>
    */
    public CMLElements<CMLMatrix> getMatrixElements() {
        Elements elements = this.getChildElements("matrix", CML_NS);
        return new CMLElements<CMLMatrix>(elements);
    }
    /** add molecule element.
    *
    * @param label label child to add

    */
    public void addLabel(AbstractLabel label) {
        label.detach();
        this.appendChild(label);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLLabel>
    */
    public CMLElements<CMLLabel> getLabelElements() {
        Elements elements = this.getChildElements("label", CML_NS);
        return new CMLElements<CMLLabel>(elements);
    }
    /** add molecule element.
    *
    * @param angle angle child to add

    */
    public void addAngle(AbstractAngle angle) {
        angle.detach();
        this.appendChild(angle);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLAngle>
    */
    public CMLElements<CMLAngle> getAngleElements() {
        Elements elements = this.getChildElements("angle", CML_NS);
        return new CMLElements<CMLAngle>(elements);
    }
    /** add molecule element.
    *
    * @param torsion torsion child to add

    */
    public void addTorsion(AbstractTorsion torsion) {
        torsion.detach();
        this.appendChild(torsion);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLTorsion>
    */
    public CMLElements<CMLTorsion> getTorsionElements() {
        Elements elements = this.getChildElements("torsion", CML_NS);
        return new CMLElements<CMLTorsion>(elements);
    }
    /** add molecule element.
    *
    * @param identifier identifier child to add

    */
    public void addIdentifier(AbstractIdentifier identifier) {
        identifier.detach();
        this.appendChild(identifier);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLIdentifier>
    */
    public CMLElements<CMLIdentifier> getIdentifierElements() {
        Elements elements = this.getChildElements("identifier", CML_NS);
        return new CMLElements<CMLIdentifier>(elements);
    }
    /** add molecule element.
    *
    * @param join join child to add

    */
    public void addJoin(AbstractJoin join) {
        join.detach();
        this.appendChild(join);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLJoin>
    */
    public CMLElements<CMLJoin> getJoinElements() {
        Elements elements = this.getChildElements("join", CML_NS);
        return new CMLElements<CMLJoin>(elements);
    }
    /** add molecule element.
    *
    * @param bondArray bondArray child to add

    */
    public void addBondArray(AbstractBondArray bondArray) {
        bondArray.detach();
        this.appendChild(bondArray);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLBondArray>
    */
    public CMLElements<CMLBondArray> getBondArrayElements() {
        Elements elements = this.getChildElements("bondArray", CML_NS);
        return new CMLElements<CMLBondArray>(elements);
    }
    /** add molecule element.
    *
    * @param name name child to add

    */
    public void addName(AbstractName name) {
        name.detach();
        this.appendChild(name);
    }
    /** get molecule child elements .
    *
    * @return CMLElements<CMLName>
    */
    public CMLElements<CMLName> getNameElements() {
        Elements elements = this.getChildElements("name", CML_NS);
        return new CMLElements<CMLName>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("ref")) {
            setRef(value);
        } else if (name.equals("idgen")) {
            setIdgen(value);
        } else if (name.equals("process")) {
            setProcess(value);
        } else if (name.equals("formula")) {
            setFormula(value);
        } else if (name.equals("count")) {
            setCount(value);
        } else if (name.equals("countExpression")) {
            setCountExpression(value);
        } else if (name.equals("chirality")) {
            setChirality(value);
        } else if (name.equals("formalCharge")) {
            setFormalCharge(value);
        } else if (name.equals("spinMultiplicity")) {
            setSpinMultiplicity(value);
        } else if (name.equals("symmetryOriented")) {
            setSymmetryOriented(value);
        } else if (name.equals("role")) {
            setRole(value);
        } else {
            super.addAttribute(att);
        }
    }
}
