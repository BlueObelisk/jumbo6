package org.xmlcml.cml.element;

import nu.xom.Element;
import nu.xom.Node;

import org.xmlcml.cml.attribute.UnitsAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.element.CMLMolecule.HydrogenControl;
import org.xmlcml.cml.element.CMLUnit.Units;
import org.xmlcml.cml.tools.MoleculeTool;

/**
 * user-modifiable class supporting amount. * autogenerated from schema use as a
 * shell which can be edited
 *
 */
public class CMLAmount extends AbstractAmount {

	/** mass, volume */
	public enum Type {
		/** mass */
		MASS,
		/** volume */
		VOLUME;
	}
	
    /**
     * constructor.
     */
    public CMLAmount() {
    }

    /**
     * constructor.
     *
     * @param old
     */
    public CMLAmount(CMLAmount old) {
        super((AbstractAmount) old);

    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        return new CMLAmount(this);

    }

    /**
     * create new instance in context of parent, overridable by subclasses.
     *
     * @param parent
     *            parent of element to be constructed (ignored by default)
     * @return CMLAmount
     */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLAmount();

    }


    /** converts a mass to a molarAmount.
     * @param molecule
     * @return molar Amount (units are mol)
     */
    public CMLAmount getMolarAmount(CMLMolecule molecule) {
    	CMLAmount molarAmount = null;
    	UnitsAttribute units = (UnitsAttribute) this.getUnitsAttribute();
    	if (units == null) {
    		throw new CMLRuntimeException("No units given on amount");
    	}
    	String unitValue = (String) units.getCMLValue();
    	if (Units.GRAM.value.equals(unitValue)) {
    		double d = molecule.getCalculatedMolecularMass(HydrogenControl.NO_EXPLICIT_HYDROGENS);
    		double amountx = this.getXMLContent();
    		molarAmount = new CMLAmount();
    		molarAmount.setUnits(Units.MMOL.value);
    		molarAmount.setXMLContent(amountx / d);
    	} else {
    		throw new CMLRuntimeException("Cannot handle units other than gram");
    	}
    	return molarAmount;
    }
    
    /** converts a volume to a molarAmount.
     * @param molecule (must contain data for molarVolume - moleculeTool.getMolarVolume())
     * @return molar Amount (units are mol)
     */
    public CMLAmount getMolarAmountFromVolume(CMLMolecule molecule) {
    	CMLAmount molarAmount = null;
    	UnitsAttribute units = (UnitsAttribute) this.getUnitsAttribute();
    	if (units == null) {
    		throw new CMLRuntimeException("No units given on amount");
    	}
    	String unitValue = (String) units.getCMLValue();
    	if (unitValue != null && Units.ML.value.equals(unitValue)) {
    		CMLProperty volume = MoleculeTool.getOrCreateTool(molecule).getMolarVolume();
    		if (volume != null) {
	    		double amountv = this.getXMLContent();
	    		molarAmount = new CMLAmount();
	    		molarAmount.setUnits(Units.MOL.value);
	    		molarAmount.setXMLContent(amountv / volume.getDouble());
    		}
    	}
    	return molarAmount;
    }
}
