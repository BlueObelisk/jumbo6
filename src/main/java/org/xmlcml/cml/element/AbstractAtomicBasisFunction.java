package org.xmlcml.cml.element;

import java.util.HashMap;
import java.util.Map;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.base.CMLUtil;
import org.xmlcml.cml.base.IntAttribute;
import org.xmlcml.cml.base.StringAttribute;

/** An atomicBasisFunction.
*
* 
* \n An atomic atomicBasisFunction which can be linked to atoms, \neigenvalues/vectors etc. Normally contained within _basisSet_\n \nNormally these are atom-centered functions, but they can also serve as \n\"ghost\" functions which are centered on points. These can be dummy atoms so \nthat the atomRef mechanism can still be used.\n This information is required to interpret the eignevector components \nand map them onto the atom list. However this mapping is normally implicit \nin the program and so it may be necessary to generate basisSet \ninformation for some programs before XML technology can be automatically used \nto link the components of the CCML document.
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractAtomicBasisFunction extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "atomicBasisFunction";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractAtomicBasisFunction() {
        super("atomicBasisFunction");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractAtomicBasisFunction to copy

    */

    public AbstractAtomicBasisFunction(AbstractAtomicBasisFunction old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("atomRef", "atomRef");
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("n", "n");
        attributeGroupNameTable.put("l", "l");
        attributeGroupNameTable.put("m", "m");
        attributeGroupNameTable.put("symbol", "symbol");
        attributeGroupNameTable.put("lm", "lm");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A reference to an atom.
    *
    * Used by bond, electron, etc.
    * --type info--
    * 
    * A reference to an existing atom.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomRefAttribute() {
        return (CMLAttribute) getAttribute("atomRef");
    }
    /** A reference to an atom.
    *
    * Used by bond, electron, etc.
    * --type info--
    * 
    * A reference to an existing atom.

    * @return String
    */
    public String getAtomRef() {
        CMLAttribute _att_atomRef = (CMLAttribute) getAttribute("atomRef");
        if (_att_atomRef == null) {
            return null;
        }
        return ((StringAttribute)_att_atomRef).getString();
    }
    /** A reference to an atom.
    *
    * Used by bond, electron, etc.
    * --type info--
    * 
    * A reference to an existing atom.

    * @param value atomRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomRef = null;
            try {
        		_att_atomRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRef);
        ((StringAttribute)_att_atomRef).setCMLValue(value);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** The principal quantum number.
    *
    * Takes values 1, 2, 3, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @return CMLAttribute
    */
    public CMLAttribute getNAttribute() {
        return (CMLAttribute) getAttribute("n");
    }
    /** The principal quantum number.
    *
    * Takes values 1, 2, 3, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @return int
    */
    public int getN() {
        CMLAttribute _att_n = (CMLAttribute) getAttribute("n");
        if (_att_n == null) {
            CMLUtil.BUG("unset attribute: n");
        }
        return ((IntAttribute)_att_n).getInt();
    }
    /** The principal quantum number.
    *
    * Takes values 1, 2, 3, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @param value n value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setN(int value) throws CMLRuntimeException {
            CMLAttribute _att_n = null;
            try {
        		_att_n = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("n"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_n == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : n; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_n);
        ((IntAttribute)_att_n).setCMLValue(value);
    }
    /** The principal quantum number.
    *
    * Takes values 1, 2, 3, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @param value n value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setN(String value) throws CMLRuntimeException {
            CMLAttribute _att_n = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("n"));
            if (_att_n == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : n; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_n);
        ((IntAttribute)_att_n).setCMLValue(value);
    }
    /** The secondary quantum number.
    *
    * takes values 0, 1, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @return CMLAttribute
    */
    public CMLAttribute getLAttribute() {
        return (CMLAttribute) getAttribute("l");
    }
    /** The secondary quantum number.
    *
    * takes values 0, 1, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @return int
    */
    public int getL() {
        CMLAttribute _att_l = (CMLAttribute) getAttribute("l");
        if (_att_l == null) {
            CMLUtil.BUG("unset attribute: l");
        }
        return ((IntAttribute)_att_l).getInt();
    }
    /** The secondary quantum number.
    *
    * takes values 0, 1, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @param value l value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setL(int value) throws CMLRuntimeException {
            CMLAttribute _att_l = null;
            try {
        		_att_l = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("l"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_l == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : l; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_l);
        ((IntAttribute)_att_l).setCMLValue(value);
    }
    /** The secondary quantum number.
    *
    * takes values 0, 1, etc.
    * --type info--
    * 
    * MinInclusive: 0

    * @param value l value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setL(String value) throws CMLRuntimeException {
            CMLAttribute _att_l = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("l"));
            if (_att_l == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : l; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_l);
        ((IntAttribute)_att_l).setCMLValue(value);
    }
    /** The azimuthal quantum number.
    *
    * takes values -1, 0, 1, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getMAttribute() {
        return (CMLAttribute) getAttribute("m");
    }
    /** The azimuthal quantum number.
    *
    * takes values -1, 0, 1, etc.

    * @return int
    */
    public int getM() {
        CMLAttribute _att_m = (CMLAttribute) getAttribute("m");
        if (_att_m == null) {
            CMLUtil.BUG("unset attribute: m");
        }
        return ((IntAttribute)_att_m).getInt();
    }
    /** The azimuthal quantum number.
    *
    * takes values -1, 0, 1, etc.

    * @param value m value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setM(int value) throws CMLRuntimeException {
            CMLAttribute _att_m = null;
            try {
        		_att_m = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("m"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_m == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : m; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_m);
        ((IntAttribute)_att_m).setCMLValue(value);
    }
    /** The azimuthal quantum number.
    *
    * takes values -1, 0, 1, etc.

    * @param value m value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setM(String value) throws CMLRuntimeException {
            CMLAttribute _att_m = new IntAttribute((IntAttribute)CMLAttributeList.getAttribute("m"));
            if (_att_m == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : m; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_m);
        ((IntAttribute)_att_m).setCMLValue(value);
    }
    /** A symbol.
    *
    * No semantics. However it should contain only 
    * ASCII characters and we may have to develop an escaping mechanism.
    *  Used on _atomicBasisFunction_, _unit_, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getSymbolAttribute() {
        return (CMLAttribute) getAttribute("symbol");
    }
    /** A symbol.
    *
    * No semantics. However it should contain only 
    * ASCII characters and we may have to develop an escaping mechanism.
    *  Used on _atomicBasisFunction_, _unit_, etc.

    * @return String
    */
    public String getSymbol() {
        CMLAttribute _att_symbol = (CMLAttribute) getAttribute("symbol");
        if (_att_symbol == null) {
            return null;
        }
        return ((StringAttribute)_att_symbol).getString();
    }
    /** A symbol.
    *
    * No semantics. However it should contain only 
    * ASCII characters and we may have to develop an escaping mechanism.
    *  Used on _atomicBasisFunction_, _unit_, etc.

    * @param value symbol value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setSymbol(String value) throws CMLRuntimeException {
            CMLAttribute _att_symbol = null;
            try {
        		_att_symbol = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("symbol"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_symbol == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : symbol; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_symbol);
        ((StringAttribute)_att_symbol).setCMLValue(value);
    }
    /** symbolic represention of l amd m.
    *
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * --type info--
    * 
    * symbolic represention of l amd m.
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * Permitted values:
    *   s
    *   p
    *   px
    *   py
    *   pz
    *   d
    *   dxy
    *   dyz
    *   dxz
    *   dx2y2
    *   dz2
    *   f
    *   g

    * @return CMLAttribute
    */
    public CMLAttribute getLmAttribute() {
        return (CMLAttribute) getAttribute("lm");
    }
    /** symbolic represention of l amd m.
    *
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * --type info--
    * 
    * symbolic represention of l amd m.
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * Permitted values:
    *   s
    *   p
    *   px
    *   py
    *   pz
    *   d
    *   dxy
    *   dyz
    *   dxz
    *   dx2y2
    *   dz2
    *   f
    *   g

    * @return String
    */
    public String getLm() {
        CMLAttribute _att_lm = (CMLAttribute) getAttribute("lm");
        if (_att_lm == null) {
            return null;
        }
        return ((StringAttribute)_att_lm).getString();
    }
    /** symbolic represention of l amd m.
    *
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * --type info--
    * 
    * symbolic represention of l amd m.
    * takes avlues of s, p, px, dxy, dx2y2, f, etc.
    * Permitted values:
    *   s
    *   p
    *   px
    *   py
    *   pz
    *   d
    *   dxy
    *   dyz
    *   dxz
    *   dx2y2
    *   dz2
    *   f
    *   g

    * @param value lm value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setLm(String value) throws CMLRuntimeException {
            CMLAttribute _att_lm = null;
            try {
        		_att_lm = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("lm"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_lm == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : lm; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_lm);
        ((StringAttribute)_att_lm).setCMLValue(value);
    }
    /** add atomicBasisFunction element.
    *
    * @param gradient gradient child to add

    */
    public void addGradient(AbstractGradient gradient) {
        gradient.detach();
        this.appendChild(gradient);
    }
    /** get atomicBasisFunction child elements .
    *
    * @return CMLElements<CMLGradient>
    */
    public CMLElements<CMLGradient> getGradientElements() {
        Elements elements = this.getChildElements("gradient", CML_NS);
        return new CMLElements<CMLGradient>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("atomRef")) {
            setAtomRef(value);
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("n")) {
            setN(value);
        } else if (name.equals("l")) {
            setL(value);
        } else if (name.equals("m")) {
            setM(value);
        } else if (name.equals("symbol")) {
            setSymbol(value);
        } else if (name.equals("lm")) {
            setLm(value);
        } else {
            super.addAttribute(att);
        }
    }
}
