package org.xmlcml.cml.element;

import java.util.HashMap;
import java.util.Map;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLAttribute;
import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;
import org.xmlcml.cml.base.CMLException;
import org.xmlcml.cml.base.CMLRuntimeException;
import org.xmlcml.cml.base.StringArrayAttribute;
import org.xmlcml.cml.base.StringAttribute;

/** Bonds contributing to this peakStructure.
*
* 
* Even a single bond should use bondRefs, not bondRef
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractPeakStructure extends CMLElement {

// fields;
    /** table mapping attribute names to attributegroup names*/
    public static Map<String, String> attributeGroupNameTable = new HashMap<String, String>();
    /** local name*/
    public final static String TAG = "peakStructure";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractPeakStructure() {
        super("peakStructure");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractPeakStructure to copy

    */

    public AbstractPeakStructure(AbstractPeakStructure old) {
        super((CMLElement) old);
    }

    static {
        attributeGroupNameTable.put("dictRef", "dictRef");
        attributeGroupNameTable.put("convention", "convention");
        attributeGroupNameTable.put("title", "title");
        attributeGroupNameTable.put("id", "id");
        attributeGroupNameTable.put("ref", "ref");
        attributeGroupNameTable.put("peakMultiplicity", "peakMultiplicity");
        attributeGroupNameTable.put("type", "peakStructureType");
        attributeGroupNameTable.put("peakShape", "peakShape");
        attributeGroupNameTable.put("value", "value");
        attributeGroupNameTable.put("units", "units");
        attributeGroupNameTable.put("atomRefs", "atomRefs");
        attributeGroupNameTable.put("bondRefs", "bondRefs");
    };
    /** get attributeGroupName from attributeName.
    *
    * @param attributeName attribute name
    * @return String
    */
    public String getAttributeGroupName(String attributeName) {
            return attributeGroupNameTable.get(attributeName);
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getDictRefAttribute() {
        return (CMLAttribute) getAttribute("dictRef");
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getDictRef() {
        CMLAttribute _att_dictRef = (CMLAttribute) getAttribute("dictRef");
        if (_att_dictRef == null) {
            return null;
        }
        return ((StringAttribute)_att_dictRef).getString();
    }
    /** A reference to a dictionary entry.
    *
    * Elements in data instances such as _scalar_ may have a dictRef attribute to point to an entry in a dictionary. To avoid excessive use of (mutable) filenames and URIs we recommend a namespace prefix, mapped to a namespace URI in the normal manner. In this case, of course, the namespace URI must point to a real XML document containing _entry_ elements and validated against STMML Schema.
    *  Where there is concern about the dictionary becoming separated from the document the dictionary entries can be physically included as part of the data instance and the normal XPointer addressing mechanism can be used.
    *  This attribute can also be used on _dictionary_ elements to define the namespace prefix
    * --type info--
    * 
    * An XML QName with required prefix.
    * 
    *  The namespace prefix must start with an alpha character
    *  and can only contain alphanumeric and '_'. The suffix can 
    * have characters from the XML ID specification 
    * (alphanumeric, '_', '.' and '-'
    * Pattern: [A-Za-z][A-Za-z0-9_]*:[A-Za-z][A-Za-z0-9_\.\-]*

    * @param value dictRef value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setDictRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_dictRef = null;
            try {
        		_att_dictRef = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("dictRef"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_dictRef == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : dictRef; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_dictRef);
        ((StringAttribute)_att_dictRef).setCMLValue(value);
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getConventionAttribute() {
        return (CMLAttribute) getAttribute("convention");
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getConvention() {
        CMLAttribute _att_convention = (CMLAttribute) getAttribute("convention");
        if (_att_convention == null) {
            return null;
        }
        return ((StringAttribute)_att_convention).getString();
    }
    /** A reference to a convention.
    *
    * There is no controlled vocabulary for conventions, but the author must ensure that the semantics are openly available and that there are mechanisms for implementation. The convention is inherited by all the subelements, 
    * so that a convention for molecule would by default extend to its bond and atom children. This can be overwritten
    *  if necessary by an explicit convention.
    *  It may be useful to create conventions with namespaces (e.g. iupac:name).
    *  Use of convention will normally require non-STMML semantics, and should be used with
    *  caution. We would expect that conventions prefixed with "ISO" would be useful,
    *  such as ISO8601 for dateTimes.
    *  There is no default, but the conventions of STMML or the related language (e.g. CML) will be assumed.
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value convention value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setConvention(String value) throws CMLRuntimeException {
            CMLAttribute _att_convention = null;
            try {
        		_att_convention = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("convention"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_convention == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : convention; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_convention);
        ((StringAttribute)_att_convention).setCMLValue(value);
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return CMLAttribute
    */
    public CMLAttribute getTitleAttribute() {
        return (CMLAttribute) getAttribute("title");
    }
    /** A title on an element.
    *
    * No controlled value.

    * @return String
    */
    public String getTitle() {
        CMLAttribute _att_title = (CMLAttribute) getAttribute("title");
        if (_att_title == null) {
            return null;
        }
        return ((StringAttribute)_att_title).getString();
    }
    /** A title on an element.
    *
    * No controlled value.

    * @param value title value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setTitle(String value) throws CMLRuntimeException {
            CMLAttribute _att_title = null;
            try {
        		_att_title = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("title"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_title == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : title; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_title);
        ((StringAttribute)_att_title).setCMLValue(value);
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return CMLAttribute
    */
    public CMLAttribute getIdAttribute() {
        return (CMLAttribute) getAttribute("id");
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @return String
    */
    public String getId() {
        CMLAttribute _att_id = (CMLAttribute) getAttribute("id");
        if (_att_id == null) {
            return null;
        }
        return ((StringAttribute)_att_id).getString();
    }
    /** A unique ID for an element.
    *
    * Id is used for machine identification of elements and
    *  in general should not have application semantics. It is similar to the XML ID type
    *  as containing only alphanumerics, '_', ',' and '-' and and must start with an
    *  alphabetic character. Ids are case sensitive. Ids should be unique within local scope,
    *  thus all atoms within a molecule should have unique ids, but separated molecules within a 
    * document (such as a published article) might have identical ids. Software
    *  should be able to search local scope (e.g. all atoms within a molecule). 
    * However this is under constant review.
    * --type info--
    * 
    * A unique ID for an element.
    * 
    *  This is not formally of type ID (an XML NAME which must start with a letter and contain only letters, digits and .-_:). It is recommended that IDs start with a letter, and contain no punctuation or whitespace. The function in XSLT will generate semantically void unique IDs.
    *  It is difficult to ensure uniqueness when documents are merged. We suggest
    *  namespacing IDs, perhaps using the containing elements as the base.
    *  Thus mol3:a1 could be a useful unique ID. 
    * However this is still experimental.
    * Pattern: [A-Za-z][A-Za-z0-9\.\-_]*

    * @param value id value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setId(String value) throws CMLRuntimeException {
            CMLAttribute _att_id = null;
            try {
        		_att_id = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("id"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_id == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : id; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_id);
        ((StringAttribute)_att_id).setCMLValue(value);
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return CMLAttribute
    */
    public CMLAttribute getRefAttribute() {
        return (CMLAttribute) getAttribute("ref");
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @return String
    */
    public String getRef() {
        CMLAttribute _att_ref = (CMLAttribute) getAttribute("ref");
        if (_att_ref == null) {
            return null;
        }
        return ((StringAttribute)_att_ref).getString();
    }
    /** A reference to an element of given type.
    *
    * ref modifies an element into a reference to an existing element of that type within the document. This is similar to a pointer and it can be thought of a strongly typed hyperlink. It may also be used for "subclassing" or "overriding" elements.
    *  When referring to an element most of the "data" such as attribute values and element content will be on the full instantiated element. Therefore ref (and possibly id) will normally be the only attributes on the pointing element. However there may be some attributes (title, count, etc.) which have useful semantics, but these are element-specific
    * --type info--
    * 
    * A reference to an existing object.
    * The semantic of reference are normally identical to 
    * an idType (e.g. "a123b"). Howevere there are some cases where compound references
    *  are required, such as "a123b:pq456". It is likely that this will be superseded at
    *  by RDF or Xpointer, but as long as we have non-uniqueIds this is a problem
    * Pattern: ([A-Za-z_][A-Za-z0-9_\.\-]*:)?[A-Za-z_][A-Za-z0-9_\.\-]*

    * @param value ref value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setRef(String value) throws CMLRuntimeException {
            CMLAttribute _att_ref = null;
            try {
        		_att_ref = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("ref"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_ref == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : ref; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_ref);
        ((StringAttribute)_att_ref).setCMLValue(value);
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @return CMLAttribute
    */
    public CMLAttribute getPeakMultiplicityAttribute() {
        return (CMLAttribute) getAttribute("peakMultiplicity");
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @return String
    */
    public String getPeakMultiplicity() {
        CMLAttribute _att_peakMultiplicity = (CMLAttribute) getAttribute("peakMultiplicity");
        if (_att_peakMultiplicity == null) {
            return null;
        }
        return ((StringAttribute)_att_peakMultiplicity).getString();
    }
    /** Multiplicity of a peak.
    *
    * Uses a semi-controlled vocabulary.
    * --type info--
    * 
    * Several maxima (not necessarily equal) within the peak rang.
    * Uses a semi-controlled vocabulary.

    * @param value peakMultiplicity value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakMultiplicity(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakMultiplicity = null;
            try {
        		_att_peakMultiplicity = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakMultiplicity"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakMultiplicity == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakMultiplicity; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakMultiplicity);
        ((StringAttribute)_att_peakMultiplicity).setCMLValue(value);
    }
    /** Type of this structure.
    *
    * Semi-controlled vocabulary such as coupling 
    * or splitting.
    * --type info--
    * 
    * User contributed vocabulary.
    * Semi-controlled vocabulary such as 
    * coupling or splitting.

    * @return CMLAttribute
    */
    public CMLAttribute getTypeAttribute() {
        return (CMLAttribute) getAttribute("type");
    }
    /** Type of this structure.
    *
    * Semi-controlled vocabulary such as coupling 
    * or splitting.
    * --type info--
    * 
    * User contributed vocabulary.
    * Semi-controlled vocabulary such as 
    * coupling or splitting.

    * @return String
    */
    public String getType() {
        CMLAttribute _att_type = (CMLAttribute) getAttribute("type");
        if (_att_type == null) {
            return null;
        }
        return ((StringAttribute)_att_type).getString();
    }
    /** Type of this structure.
    *
    * Semi-controlled vocabulary such as coupling 
    * or splitting.
    * --type info--
    * 
    * User contributed vocabulary.
    * Semi-controlled vocabulary such as 
    * coupling or splitting.

    * @param value type value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setType(String value) throws CMLRuntimeException {
            CMLAttribute _att_type = null;
            try {
        		_att_type = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakStructureType"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_type == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakStructureType; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_type);
        ((StringAttribute)_att_type).setCMLValue(value);
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @return CMLAttribute
    */
    public CMLAttribute getPeakShapeAttribute() {
        return (CMLAttribute) getAttribute("peakShape");
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @return String
    */
    public String getPeakShape() {
        CMLAttribute _att_peakShape = (CMLAttribute) getAttribute("peakShape");
        if (_att_peakShape == null) {
            return null;
        }
        return ((StringAttribute)_att_peakShape).getString();
    }
    /** Shape of a peak.
    *
    * Semi-controlled vocabulary such as broad or sharp.
    * --type info--
    * 
    * User contributed vocabulary of type foo:bar.
    * Semi-controlled vocabulary such as 
    * broad or sharp.

    * @param value peakShape value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setPeakShape(String value) throws CMLRuntimeException {
            CMLAttribute _att_peakShape = null;
            try {
        		_att_peakShape = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("peakShape"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_peakShape == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : peakShape; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_peakShape);
        ((StringAttribute)_att_peakShape).setCMLValue(value);
    }
    /** Value of a scalar object.
    *
    * The value must be consistent with the dataType of the object.

    * @return CMLAttribute
    */
    public CMLAttribute getValueAttribute() {
        return (CMLAttribute) getAttribute("value");
    }
    /** Value of a scalar object.
    *
    * The value must be consistent with the dataType of the object.

    * @return String
    */
    public String getCMLValue() {
        CMLAttribute _att_value = (CMLAttribute) getAttribute("value");
        if (_att_value == null) {
            return null;
        }
        return ((StringAttribute)_att_value).getString();
    }
    /** Value of a scalar object.
    *
    * The value must be consistent with the dataType of the object.

    * @param value value value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setCMLValue(String value) throws CMLRuntimeException {
            CMLAttribute _att_value = null;
            try {
        		_att_value = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("value"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_value == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : value; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_value);
        ((StringAttribute)_att_value).setCMLValue(value);
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return CMLAttribute
    */
    public CMLAttribute getUnitsAttribute() {
        return (CMLAttribute) getAttribute("units");
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @return String
    */
    public String getUnits() {
        CMLAttribute _att_units = (CMLAttribute) getAttribute("units");
        if (_att_units == null) {
            return null;
        }
        return ((StringAttribute)_att_units).getString();
    }
    /** Scientific units on an element.
    *
    * These must be taken from a dictionary 
    * of units. There should be some mechanism for validating the type 
    * of the units against the possible values of the element.
    * --type info--
    * 
    * Scientific units.
    * These will be linked to dictionaries of 
    * units with conversion information, using namespaced references 
    * (e.g. si:m). Distinguish carefully from _unitType_ 
    * which is an element describing a type of a unit in a 
    * _unitList_.

    * @param value units value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setUnits(String value) throws CMLRuntimeException {
            CMLAttribute _att_units = null;
            try {
        		_att_units = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("units"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_units == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : units; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_units);
        ((StringAttribute)_att_units).setCMLValue(value);
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getAtomRefsAttribute() {
        return (CMLAttribute) getAttribute("atomRefs");
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @return String[]
    */
    public String[] getAtomRefs() {
        CMLAttribute _att_atomRefs = (CMLAttribute) getAttribute("atomRefs");
        if (_att_atomRefs == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_atomRefs).getStringArray();
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setAtomRefs(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_atomRefs = null;
            try {
        		_att_atomRefs = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("atomRefs"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_atomRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRefs);
        ((StringArrayAttribute)_att_atomRefs).setCMLValue(value);
    }
    /** A reference to a list of atoms.
    *
    * Used by bonds, electrons, atomSets, etc.
    * --type info--
    * 
    * An array of atomRefs.
    * The atomRefs
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of bonds and atomParitys.
    *  It can also be used for arrays of atomIDTypes such as in complex stereochemistry,
    *  geometrical definitions, atom groupings, etc.

    * @param value atomRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setAtomRefs(String value) throws CMLRuntimeException {
            CMLAttribute _att_atomRefs = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("atomRefs"));
            if (_att_atomRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : atomRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_atomRefs);
        ((StringArrayAttribute)_att_atomRefs).setCMLValue(value);
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return CMLAttribute
    */
    public CMLAttribute getBondRefsAttribute() {
        return (CMLAttribute) getAttribute("bondRefs");
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @return String[]
    */
    public String[] getBondRefs() {
        CMLAttribute _att_bondRefs = (CMLAttribute) getAttribute("bondRefs");
        if (_att_bondRefs == null) {
            return null;
        }
        return ((StringArrayAttribute)_att_bondRefs).getStringArray();
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    public void setBondRefs(String[] value) throws CMLRuntimeException {
            CMLAttribute _att_bondRefs = null;
            try {
        		_att_bondRefs = (CMLAttribute) org.xmlcml.cml.element.SpecialAttribute.createSubclassedAttribute(this, CMLAttributeList.getAttribute("bondRefs"));
        	} catch (CMLException e) {
        		throw new CMLRuntimeException("bug "+e);
        	}
            if (_att_bondRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondRefs);
        ((StringArrayAttribute)_att_bondRefs).setCMLValue(value);
    }
    /** A reference to a list of bonds.
    *
    * Used by electrons, bondSets, etc.
    * --type info--
    * 
    * An array of references to bonds.
    * The references cannot (yet)
    *  cannot be schema- or schematron-validated. Instances of this type will
    *  be used in array-style representation of electron counts, etc.
    *  It can also be used for arrays of bondIDTypes such as in complex stereochemistry,
    *  geometrical definitions, bond groupings, etc.

    * @param value bondRefs value
    * @throws CMLRuntimeException attribute wrong value/type

    */
    private void setBondRefs(String value) throws CMLRuntimeException {
            CMLAttribute _att_bondRefs = new StringArrayAttribute((StringArrayAttribute)CMLAttributeList.getAttribute("bondRefs"));
            if (_att_bondRefs == null) {
                throw new CMLRuntimeException("BUG: cannot process attributeGroupName : bondRefs; probably incompatible attributeGroupName and attributeName");
            }
            super.addAttribute(_att_bondRefs);
        ((StringArrayAttribute)_att_bondRefs).setCMLValue(value);
    }
    /** add peakStructure element.
    *
    * @param metadataList metadataList child to add

    */
    public void addMetadataList(AbstractMetadataList metadataList) {
        metadataList.detach();
        this.appendChild(metadataList);
    }
    /** get peakStructure child elements .
    *
    * @return CMLElements<CMLMetadataList>
    */
    public CMLElements<CMLMetadataList> getMetadataListElements() {
        Elements elements = this.getChildElements("metadataList", CML_NS);
        return new CMLElements<CMLMetadataList>(elements);
    }
    /** add peakStructure element.
    *
    * @param peakStructure peakStructure child to add

    */
    public void addPeakStructure(AbstractPeakStructure peakStructure) {
        peakStructure.detach();
        this.appendChild(peakStructure);
    }
    /** get peakStructure child elements .
    *
    * @return CMLElements<CMLPeakStructure>
    */
    public CMLElements<CMLPeakStructure> getPeakStructureElements() {
        Elements elements = this.getChildElements("peakStructure", CML_NS);
        return new CMLElements<CMLPeakStructure>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
        String name = att.getLocalName();
        String value = att.getValue();
        if (name == null) {
        } else if (name.equals("dictRef")) {
            setDictRef(value);
        } else if (name.equals("convention")) {
            setConvention(value);
        } else if (name.equals("title")) {
            setTitle(value);
        } else if (name.equals("id")) {
            setId(value);
        } else if (name.equals("ref")) {
            setRef(value);
        } else if (name.equals("peakMultiplicity")) {
            setPeakMultiplicity(value);
        } else if (name.equals("type")) {
            setType(value);
        } else if (name.equals("peakShape")) {
            setPeakShape(value);
        } else if (name.equals("value")) {
            setCMLValue(value);
        } else if (name.equals("units")) {
            setUnits(value);
        } else if (name.equals("atomRefs")) {
            setAtomRefs(value);
        } else if (name.equals("bondRefs")) {
            setBondRefs(value);
        } else {
            super.addAttribute(att);
        }
    }
}
