package org.xmlcml.cml.element;

import java.util.ArrayList;
import java.util.List;

import nu.xom.Element;
import nu.xom.Node;

import org.xmlcml.cml.base.CMLElement;

/**
 * user-modifiable class supporting peak. * autogenerated from schema use as a
 * shell which can be edited
 *
 */
public class CMLPeak extends AbstractPeak {

	/** namespaced element name.*/
	public final static String NS = C_E+TAG;

    /**
     * constructor.
     */
    public CMLPeak() {
    }

    /**
     * constructor.
     *
     * @param old
     */
    public CMLPeak(CMLPeak old) {
        super((AbstractPeak) old);

    }

    /**
     * copy node .
     *
     * @return Node
     */
    public Node copy() {
        return new CMLPeak(this);

    }

    /**
     * create new instance in context of parent, overridable by subclasses.
     *
     * @param parent
     *            parent of element to be constructed (ignored by default)
     * @return CMLPeak
     */
    public CMLElement makeElementInContext(Element parent) {
        return new CMLPeak();

    }

    /**
     * gets the atoms referenced by atomRefs. conveience method to get spectrum
     * and its sibling molecule if these cannot be found returns zero length
     * list
     *
     * @return atoms referred to in atomRefs or sero length list if not found
     */
    public List<CMLAtom> getDerefencedAtoms() {
        List<CMLAtom> atomList = new ArrayList<CMLAtom>();
        String[] atomRefs = this.getAtomRefs();
        if (atomRefs != null) {
            // get ancestor spectrum
            CMLSpectrum spectrum = CMLSpectrum.getSpectrum(this);
            if (spectrum != null) {
                CMLMolecule molecule = spectrum.getSiblingMolecule();
                if (molecule != null) {
                    atomList = molecule.getAtomListByIds(atomRefs);
                }
            }
        }
        return atomList;
    }

    /**
     * gets atoms referenced as targets of coupling. makes list of non-zero
     * lists returned by child peakStructure.getCouplingsFrom() uses sibling
     * molecule of spectrum
     *
     * @return list of atomLists (zero length if none found)
     */
    public List<List<CMLAtom>> getCouplingsFrom() {
        return getCouplingsFrom(CMLSpectrum.getAuntMolecule(this));
    }

    /**
     * gets atoms referenced as targets of coupling. makes list of non-zero
     * lists returned by child peakStructure.getCouplingsFrom()
     *
     * @param molecule
     *            owning atoms; if null returns zero length List
     * @return list of atomLists (zero length if none found)
     */
    public List<List<CMLAtom>> getCouplingsFrom(CMLMolecule molecule) {
        List<List<CMLAtom>> atomListList = new ArrayList<List<CMLAtom>>();
        for (CMLPeakStructure ps : this.getPeakStructureElements()) {
            List<CMLAtom> atomList = ps.getCouplingsFrom(molecule);
            if (atomList.size() > 0) {
                atomListList.add(atomList);
            }
        }
        return atomListList;
    }
}
