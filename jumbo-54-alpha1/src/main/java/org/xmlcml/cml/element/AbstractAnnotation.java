package org.xmlcml.cml.element;

import nu.xom.Attribute;
import nu.xom.Elements;

import org.xmlcml.cml.base.CMLElement;
import org.xmlcml.cml.base.CMLElements;

/** A documentation container similar to annotation in XML Schema.
*
* 
* A documentation container similar to annotation in XML Schema. At present this is experimental and designed to be used for dictionaries, units, etc. One approach is to convert these into XML Schemas when the documentation and appinfo children will emerge in their correct position in the derived schema.\n It is possible that this may develop as a useful tool for annotating components\n of complex objects such as molecules. 
* 
* NON-MOFIFIABLE class autogenerated from schema
* DO NOT EDIT; ADD FUNCTIONALITY TO SUBCLASS

*/
public abstract class AbstractAnnotation extends CMLElement {

// fields;
    /** local name*/
    public final static String TAG = "annotation";
    /** default constructor.
    *
    * creates element initially without parent


    */

    public AbstractAnnotation() {
        super("annotation");
    }
    /** copy constructor.
    *
    * deep copy using XOM copy()

    * @param old AbstractAnnotation to copy

    */

    public AbstractAnnotation(AbstractAnnotation old) {
        super((CMLElement) old);
    }

    /** add annotation element.
    *
    * @param documentation documentation child to add

    */
    public void addDocumentation(AbstractDocumentation documentation) {
        documentation.detach();
        this.appendChild(documentation);
    }
    /** get annotation child elements .
    *
    * @return CMLElements<CMLDocumentation>
    */
    public CMLElements<CMLDocumentation> getDocumentationElements() {
        Elements elements = this.getChildElements("documentation", CML_NS);
        return new CMLElements<CMLDocumentation>(elements);
    }
    /** add annotation element.
    *
    * @param appinfo appinfo child to add

    */
    public void addAppinfo(AbstractAppinfo appinfo) {
        appinfo.detach();
        this.appendChild(appinfo);
    }
    /** get annotation child elements .
    *
    * @return CMLElements<CMLAppinfo>
    */
    public CMLElements<CMLAppinfo> getAppinfoElements() {
        Elements elements = this.getChildElements("appinfo", CML_NS);
        return new CMLElements<CMLAppinfo>(elements);
    }
    /** overrides addAttribute(Attribute).
    *
    * reroutes calls to setFoo()

    * @param att  attribute

    */
    public void addAttribute(Attribute att) {
            super.addAttribute(att);
    }
}
